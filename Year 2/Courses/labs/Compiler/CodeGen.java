import antlr.CommonAST;
import antlr.DumpASTVisitor;
import java.io.*;
import java.util.*;

public class CodeGen
{

	MAST treetop ;
	MSymbolTable symbolTable ;
	PrintStream codeout;
 	private static DumpASTVisitor visitor = new DumpASTVisitor();


	public CodeGen(PrintStream codefile, MAST tree, MSymbolTable symbols)
	{
		treetop = tree;
		symbolTable = symbols;
		codeout = codefile;

		codeout.println("#Code generated by the Sridhar Sarnobat's compiler");
		codeout.println("#Module name " + tree.getFirstChild().toString());

		declareData();

		beginProgram();

		textTranslator.translateText(treetop,codeout,this);

  		exitProgram();
	}

	private void declareData()
	{
		codeout.println("\t.data");
		Iterator vars = symbolTable.iterateVars();

		while(vars.hasNext())
		{
			String vName = (String) vars.next();

			if (symbolTable.isVariable(vName))
			{
				codeout.println("_" + vName + ":\t.space\t4");
			}
		}
		codeout.println("__newline:\n\t.asciiz \"\\" + "n\"");
	}

	private void beginProgram()
	{
		codeout.println("\t.text\n\t.globl\tmain\nmain:");
	}

	private void exitProgram()
	{
		codeout.println("#sycall exit to end program");
		codeout.println("\tli\t$v0,10");
		codeout.println("\tsyscall");
	}

	void internalError( String whatswrong, MAST thetree )
	{
		// print an error message, dump the tree and quit
		System.err.println(whatswrong);
		visitor.visit(thetree);
		throw new Error(whatswrong);
	}

	void debug( String whatswrong, MAST thetree )
	{
		// print an error message and dump the tree
		System.err.println(whatswrong);
		visitor.visit(thetree);
	}


	void module(MAST tree ) {

	}

}
