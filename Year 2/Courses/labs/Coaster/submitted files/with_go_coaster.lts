
/* roller coaster - simple version */

const Max  = 9
const MCar = 4

//models passenger arrival at the platform
PASSENGERS = (newPassenger -> PASSENGERS).

//limits passengers on the platfrom to Max & allocates passengers to coaster cars
CONTROLLER        
    = CONTROL[0][0],
CONTROL[count:0..Max][carSize:0..MCar]  
	= (
		when (count<Max) 
			newPassenger  -> CONTROL[count+1][carSize]
		|requestPassenger[n:1..MCar] -> CONTROL[count][n]
		|when (carSize>0 && count>=carSize))
			getPassenger[carSize] -> CONTROL[count-carSize][0]
		|when (0<count && count<carSize && carSize>0) goNow -> getPassenger[count] -> CONTROL[0][0] // THIS IS RIGHT
		|when (!(0<count && count<carSize && carSize>0)) goNow -> CONTROL[count][carSize] //pressing goNow does nothing 

// FIND OUT IF THE PROGRESS VIOLATION DISPLAYED MEANS ANYTHING
		).

//the coaster car requests N passengers and departs when the
// controller responds with getPassenger
COASTERCAR(N=MCar) 
    = (arrive->requestPassenger[N] -> getPassenger[i:1..MCar] -> 
         if (i>N) then ERROR else (depart -> COASTERCAR))
      +{{requestPassenger,getPassenger}[1..MCar]}.

//controls access to the platform
PLATFORMACCESS	=	(arrive -> depart -> PLATFORMACCESS).

BUTTON			=	(goNow -> BUTTON).

//system with two coaster cars with capacity two and three
||ROLLERCOASTER
         = (PASSENGERS 
			|| BUTTON
			|| car[1..2]::(CONTROLLER || PLATFORMACCESS ) 
			|| car[1]:COASTERCAR(2) 
			|| car[2]:COASTERCAR(3)
			)/{
				newPassenger/car[1..2].newPassenger,
				goNow/car[1..2].goNow
             }.




