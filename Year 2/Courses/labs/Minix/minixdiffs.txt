**************************************************************************************************
**************************	DIFFERENCES IN ALL FILES	**********************************
**************************************************************************************************
Only in usr/: adm
Only in usr/: bin
Only in usr/lab/start/: commands
Only in usr/: etc
diff -rb usr/include/minix/callnr.h usr/lab/start/include/minix/callnr.h
67,68d66
< 
< #define DEBUG             26
diff -rb usr/include/minix/com.h usr/lab/start/include/minix/com.h
20c20
< #define TTY		(PRINTER - 1 - ENABLE_DEBUGGING)
---
> #define TTY		(PRINTER - 1)
35,36d34
< #define DEBUGGER	(PRINTER - ENABLE_DEBUGGING)
< 
156,170d153
< 
< #define DEBUG_START	1
< #define NOT_DEBUGGING	2
< #define DEBUG_PROCADM	3
< #define STEP_MODE	4
< #define BREAK_MODE	5
< #define DEBUG_STEP	6
< #define DEBUG_RESUME	7
< #define DEBUG_BREAKPNT	8
< #define CHILD_DIED	9
< #define INSTRUCTION	10
< #define BREAKPOINT	11
< #define SINGLE_STEP	12
< 
< /*#define DEBUG_TYPE	26*/
diff -rb usr/include/minix/config.h usr/lab/start/include/minix/config.h
14d13
< #define ENABLE_DEBUGGING 0
37,38c36,37
< #define NR_BUFS           2048	/* # blocks in the buffer cache */
< #define NR_BUF_HASH       2048	/* size of buf hash table; MUST BE POWER OF 2*/
---
> #define NR_BUFS           40	/* # blocks in the buffer cache */
> #define NR_BUF_HASH       64	/* size of buf hash table; MUST BE POWER OF 2*/
42,43c41,42
< #define NR_BUFS           2048	/* # blocks in the buffer cache */
< #define NR_BUF_HASH      2048	/* size of buf hash table; MUST BE POWER OF 2*/
---
> #define NR_BUFS           80	/* # blocks in the buffer cache */
> #define NR_BUF_HASH      128	/* size of buf hash table; MUST BE POWER OF 2*/
diff -rb usr/include/minix/const.h usr/lab/start/include/minix/const.h
53c53
< #define NR_TASKS	(8 + NR_CTRLRS + ENABLE_PRINTER + ENABLE_DEBUGGING)
---
> #define NR_TASKS	(8 + NR_CTRLRS + ENABLE_PRINTER)
diff -rb usr/include/unistd.h usr/lab/start/include/unistd.h
126d125
< _PROTOTYPE( int debug, (void)						);
Only in usr/: lab
Only in usr/: lib
Only in usr/: local
Only in usr/: man
Only in usr/: mdec
Only in usr/: preserve
Only in usr/: run
Only in usr/: spool
diff -rb usr/src/fs/Makefile usr/lab/start/src/fs/Makefile
17c17
< 	lock.c misc.o utility.o table.o putk.o debug.o
---
> 	lock.c misc.o utility.o table.o putk.o
231,238d230
< 
< debug.o:	$a
< debug.o:	$h/callnr.h
< debug.o:	$h/com.h
< debug.o:	file.h
< debug.o:	fproc.h
< debug.o:	inode.h
< debug.o:	param.h
Only in usr/src/fs: cache.o
Only in usr/src/fs: cache2.o
Only in usr/src/fs: debug.c
Only in usr/src/fs: debug.o
Only in usr/src/fs: device.o
Only in usr/src/fs: filedes.o
Only in usr/src/fs: fs
Only in usr/src/fs: inode.o
Only in usr/src/fs: link.o
Only in usr/src/fs: main.o
Only in usr/src/fs: misc.o
Only in usr/src/fs: mount.o
Only in usr/src/fs: open.o
Only in usr/src/fs: path.o
Only in usr/src/fs: pipe.o
Only in usr/src/fs: protect.o
diff -rb usr/src/fs/proto.h usr/lab/start/src/fs/proto.h
161,163d160
< 
< /* debug.c */
< _PROTOTYPE( int do_debug, (void)					);
Only in usr/src/fs: putk.o
Only in usr/src/fs: read.o
Only in usr/src/fs: stadir.o
Only in usr/src/fs: super.o
Only in usr/src/fs: suspend.txt
diff -rb usr/src/fs/table.c usr/lab/start/src/fs/table.c
45,49c45
< #if ENABLE_DEBUGGING
< 	do_debug,	/* 26 = DEBUG	*/
< #else
< 	no_sys,		/* 26 = no_sys	*/
< #endif
---
> 	no_sys,		/* 26 = unused	*/
Only in usr/src/fs: table.o
Only in usr/src/fs: time.o
Only in usr/src/fs: utility.o
Only in usr/src/fs: write.o
diff -rb usr/src/kernel/Makefile usr/lab/start/src/kernel/Makefile
4c4
< u = /usr
---
> u = /usr/start
23c23
< 	drvlib.o floppy.o printer.o pty.o zip.o debugger.o
---
> 	drvlib.o floppy.o printer.o pty.o zip.o
174,179d173
< debugger.o:	$a
< debugger.o:	$i/stdlib.h
< debugger.o:	$i/signal.h
< debugger.o:	$h/callnr.h
< debugger.o:	$h/com.h
< debugger.o:	proc.h
Only in usr/src/kernel: clock.o
Only in usr/src/kernel: console.o
Only in usr/src/kernel: debugger.c
Only in usr/src/kernel: debugger.o
Only in usr/src/kernel: dmp.o
Only in usr/src/kernel: driver.o
Only in usr/src/kernel: drvlib.o
diff -rb usr/src/kernel/exception.c usr/lab/start/src/kernel/exception.c
51,65d50
< #if ENABLE_DEBUGGING
< 
<   /* stage 3 */
<   if (vec_nr == BREAKPOINT_VECTOR) {	/* software breakpoint */
< 	breakpoint();			/* interrupt handler */
<   	return;
<   }
< 
<   if (vec_nr == DEBUG_VECTOR) {		/* single step (trace) */
< 	single_step();			/* interrupt handler */
< 	return;
<   }
< 
< #endif
< 
78c63
<   if (ep->msg == NIL_PTR || processor < ep->minprocessor) {
---
>   if (ep->msg == NIL_PTR || processor < ep->minprocessor)
80,81c65
<   }
<   else {
---
>   else
88d71
<   }
Only in usr/src/kernel: exception.o
Only in usr/src/kernel: floppy.o
Only in usr/src/kernel: grep.txt
Only in usr/src/kernel: i8259.o
Only in usr/src/kernel: kernel
Only in usr/src/kernel: kernelh.h
Only in usr/src/kernel: keyboard.o
Only in usr/src/kernel: klib.o
Only in usr/src/kernel: main.o
Only in usr/src/kernel: memory.o
Only in usr/src/kernel: misc.o
Only in usr/src/kernel: mpx.o
Only in usr/src/kernel: printer.o
Only in usr/src/kernel: proc.o
Only in usr/src/kernel: protect.o
diff -rb usr/src/kernel/proto.h usr/lab/start/src/kernel/proto.h
10,14d9
< /* debugger.c */
< _PROTOTYPE( void debug_task, (void)					);
< _PROTOTYPE( int breakpoint, (void)					);
< _PROTOTYPE( int single_step, (void)					);
< 
Only in usr/src/kernel: pty.o
Only in usr/src/kernel: rs232.o
Only in usr/src/kernel: start.o
Only in usr/src/kernel: system.o
diff -rb usr/src/kernel/table.c usr/lab/start/src/kernel/table.c
51,53d50
< /* stage 3 */
< #define DEBUG_STACK	(SMALL_STACK * ENABLE_DEBUGGING)
< 
64c61
< /* stage 3 */
---
> 
68c65
< 	SYS_STACK + DEBUG_STACK)
---
> 	SYS_STACK)
81,84d77
< /* stage 3 */
< #if ENABLE_DEBUGGING
< 	{ debug_task,		DEBUG_STACK,	"DEBUG"		},
< #endif
Only in usr/src/kernel: table.o
Only in usr/src/kernel: test.txt
Only in usr/src/kernel: tty.o
Only in usr/src/kernel: zip.o
Only in usr/lab/start/src/lib/compiled: end.a
Only in usr/lab/start/src/lib/compiled: libc.a
Only in usr/lab/start/src/lib/compiled: libcurses.a
Only in usr/lab/start/src/lib/compiled: libd.a
Only in usr/lab/start/src/lib/compiled: libe.a
Only in usr/lab/start/src/lib/compiled: libedit.a
Only in usr/lab/start/src/lib/compiled: libfp.a
Only in usr/lab/start/src/lib/compiled: libm.a
Only in usr/lab/start/src/lib/compiled: libm2.a
Only in usr/lab/start/src/lib/compiled: libp.a
Only in usr/lab/start/src/lib/compiled: libsys.a
Only in usr/lab/start/src/lib/compiled: liby.a
Only in usr/src/lib: libc.a
diff -rb usr/src/lib/posix/Makefile usr/lab/start/src/lib/posix/Makefile
95d94
< 	$(LIBRARY)(_debug.o) \
355,357d353
< 
< $(LIBRARY)(_debug.o):   _debug.c
< 	$(CC1) _debug.c 
Only in usr/src/lib/posix: _debug.c
diff -rb usr/src/lib/syscall/Makefile usr/lab/start/src/lib/syscall/Makefile
102d101
< 	$(LIBRARY)(debug.o) \
386,388d384
< 
< $(LIBRARY)(debug.o):	debug.s
< 	$(CC1) debug.s
Only in usr/src/lib/syscall: debug.s
diff -rb usr/src/mm/Makefile usr/lab/start/src/mm/Makefile
15,16c15
< 	signal.o alloc.o utility.o table.o putk.o getset.o misc.o \
< 	debugstart.o
---
> 	signal.o alloc.o utility.o table.o putk.o getset.o misc.o
46d44
< exec.o: $h/config.h
56d53
< forkexit.o:	$h/com.h
109,111d105
< 
< debugstart.o:	$a
< debugstart.o:	$h/com.h
Only in usr/src/mm: alloc.o
Only in usr/src/mm: break.o
Only in usr/src/mm: debugstart.c
Only in usr/src/mm: debugstart.o
diff -rb usr/src/mm/exec.c usr/lab/start/src/mm/exec.c
18,19c18
< #include <minix/com.h>
< #include <minix/config.h>
---
> 
177,188d175
< 
< #if ENABLE_DEBUGGING
<   if((rmp->mp_flags & DEBUG_FLAG)!=0){
< 	message mess;
< 	mess.m_type = DEBUG_START;
< 	mess.m_source = MM_PROC_NR;
< 	mess.PROC_NR = who;
< 	printf("FORWARDING MESSAGE\n");
< 	sendrec(DEBUGGER, &mess);
< 	printf("exec.c: RETURNED FROM DEBUGGER\n");
<   }
< #endif
Only in usr/src/mm: exec.o
diff -rb usr/src/mm/forkexit.c usr/lab/start/src/mm/forkexit.c
20d19
< #include <minix/com.h>
142,153d140
<   message child_dead_m;
< 
< /* STAGE 9 */
< 
< #if ENABLE_DEBUGGING
<   if((rmp->mp_flags & DEBUG_FLAG) != 0){
< 	printf("inside if body");
< 	child_dead_m.m_type = CHILD_DIED;
< 	child_dead_m.m_source = MM_PROC_NR;
< 	sendrec(DEBUGGER, &child_dead_m);
<   }
< #endif
Only in usr/src/mm: forkexit.o
Only in usr/src/mm: getset.o
Only in usr/src/mm: main.o
Only in usr/src/mm: misc.o
Only in usr/src/mm: mm
diff -rb usr/src/mm/mproc.h usr/lab/start/src/mm/mproc.h
57,59c57
< #if ENABLE_DEBUGGING
< #define DEBUG_FLAG	0x080	/* sets debug flag*/
< #endif
---
> 
diff -rb usr/src/mm/proto.h usr/lab/start/src/mm/proto.h
71,73d70
< 
< /* debugstart.c */
< _PROTOTYPE( int do_debugstart, (void)					);
Only in usr/src/mm: putk.o
Only in usr/src/mm: signal.o
diff -rb usr/src/mm/table.c usr/lab/start/src/mm/table.c
43,47c43
< #if ENABLE_DEBUGGING
< 	do_debugstart,	/* 26 = debugstart*/
< #else
< 	no_sys,		/* 26 = no_sys	*/
< #endif
---
> 	no_sys,		/* 26 = unused	*/
Only in usr/src/mm: table.o
Only in usr/src/mm: utility.o
diff -rb usr/src/tools/Makefile usr/lab/start/src/tools/Makefile
8c8
< SYSTEM=	../kernel/kernel ../mm/mm ../fs/fs init
---
> PROGRAMS=	../kernel/kernel ../mm/mm ../fs/fs init
10c10
< system:
---
> programs:
16,17c16,17
< image:	$(SYSTEM)
< 	installboot -image $@ $(SYSTEM)
---
> image:	$(PROGRAMS)
> 	installboot -image $@ $(PROGRAMS)
Only in usr/src/tools: init
Only in usr/lab/start/: start.tar
Only in usr/: tmp


**************************************************************************************************
**************************	kernel/debugger.c		**********************************
**************************************************************************************************
/* This file contains a debugger.
 * Debbuging of user programs is started by the command 'debug fn'
 * which results in a message to this driver with type "START"
 */

#include "kernel.h"
#include <stdlib.h>
#include <signal.h>
#include <minix/callnr.h>
#include <minix/com.h>
#include "proc.h"

#if ENABLE_DEBUGGING

#define BREAKPOINT_LENGTH 1	/* # of bytes for a breakpoint */
#define PROC_LENGTH sizeof (struct proc)

PRIVATE char break_code = 0xCC; /* this code causes an interrupt */
PRIVATE char store_code;	/* to save the code that was originally
				 * in the byte */

typedef struct {
	int proc_nr;
	int defined;
	char *address;
	phys_bytes vir;
	struct proc *rp;
	long brkadd;
} users;

PRIVATE users parent, child;

PRIVATE int interrupt_no; /* used to register the interrupt */
PRIVATE phys_bytes addr_umap;
PRIVATE	phys_bytes store_addr;
FORWARD _PROTOTYPE( void do_cancel, (message *cancel_m)			);
FORWARD _PROTOTYPE( void do_start, (message *instr_m)			);
FORWARD _PROTOTYPE( void do_interrupt, (void)				);
FORWARD _PROTOTYPE( void do_mourn, (message *mourn_m)			);
FORWARD _PROTOTYPE( void do_evaluate, (message *instr_m)		);

FORWARD _PROTOTYPE( void do_resume, (message *instr_m)			);
FORWARD _PROTOTYPE( void do_step, (message *instr_m)			);
FORWARD _PROTOTYPE( void do_breakpnt, (message *instr_m)		);
FORWARD _PROTOTYPE( void do_procadm, (message *instr_m)			);

FORWARD _PROTOTYPE( void breakpoint_int, (void)				);
FORWARD _PROTOTYPE( void step_int, (void)				);

FORWARD _PROTOTYPE( void fs_reply, (int code, int proc_nr, int status)	);
FORWARD _PROTOTYPE( void mm_reply, (int status)				);
FORWARD _PROTOTYPE( void init_debug, (void)				);

/*==========================================================================*
 *			fs_reply && mm_reply				    *
 *==========================================================================*/

/* Builds message, sets variables and sends it to fs or mm tasks */

PRIVATE void fs_reply(int code, int proc_nr, int status){
	message fs_mess;

	fs_mess.m_type = code;
	fs_mess.REP_STATUS = status;
	fs_mess.REP_PROC_NR = proc_nr;

	send(FS_PROC_NR, &fs_mess);
}

PRIVATE void mm_reply(int status){
	message mm_mess;

	mm_mess.REP_STATUS = status;
	printf("MM Reply USED\n");

	send(MM_PROC_NR, &mm_mess);
}

/*==========================================================================*
 *				 debug_task				    *
 *==========================================================================*/
PUBLIC void debug_task()
{
/* Main routine of the debugger. Here messages are received and handled.
 * CANCEL	The termination of either the process to be debugged or
 *		the parent.
 * CHILD_DIED	MM informs that the child has terminated.
 * DEBUG_START	MM informs the the child has done an exec.
 * HARD_INT	Hardware received an interrupt.
 * INSTRUCTION	The parent sent a message.
 */
  message debug_m;

  init_debug();

  while(TRUE) {
	receive(ANY, &debug_m);

	switch(debug_m.m_type){
	case CANCEL:		do_cancel(&debug_m);	break;
	case CHILD_DIED:	do_mourn(&debug_m);	break;
	case DEBUG_START:	do_start(&debug_m);	break;
	case HARD_INT:		do_interrupt();		break;
	case INSTRUCTION:	do_evaluate(&debug_m);	break;
	default:{
		if (debug_m.m_source == FS_PROC_NR){
			fs_reply (TASK_REPLY, debug_m.PROC_NR, ENOSYS);
		}
		else {
			mm_reply (ENOSYS);
		}
		break;
	}
} }	}

/*==========================================================================*
 *				 do_cancel				    *
 *==========================================================================*/
PRIVATE void do_cancel(message *cancel_m)
{
/* Deal with the arrival of a CANCEL message from the kill action when you
   type "kill" at the konsole" */

	init_debug(); /* defined below, kills child and parent processes */

	if(cancel_m -> m_source == FS_PROC_NR){
		fs_reply(TASK_REPLY, cancel_m -> PROC_NR, OK);
	}
	else { /* Case when MM_PROC_NR */
		mm_reply(EINTR); /* replies to mm with an error message */
	}
}
/*==========================================================================*
 *				 do_start				    *
 *==========================================================================*/
PRIVATE void do_start (message *start_m)
{
/* By use of the system call debug a request has been made to debug a
 * program, with the effect that a bit was raised in the flags.
 * This program then called exec; this was caught by MM, which sent a
 * message to DEBUGGER.
 * If the parent is already known to the system, send the child's process
 * descriptor over; otherwise, do nothing now.
 * Reply to caller (MM) that everything went well.
 */
	child.defined = TRUE;
	/* child is now created */

	child.proc_nr = start_m -> PROC_NR;
	/* saves the childs process no. */

	child.rp = proc_addr(child.proc_nr);
	/* child.rp is the pointer to the child's process descriptor */

	child.vir = vir2phys(child.rp);
  	/* sets child's physical source address */

	printf("debugger.c: CHILD REMOVED FROM READY QUEUE\n");

	lock_unready(child.rp);
	/* takes the child off the ready queue */

	mm_reply(OK);

	if(parent.defined){

   		printf("before copy resumed from do_procadm(): in do_start()");
		printf("\n");

		phys_copy(child.vir, parent.vir, (phys_bytes) PROC_LENGTH);
		/* copies the child source address to parent */

		printf("after copy resumed from do_procadm(): in do_start()");
		printf("\n");

		fs_reply(REVIVE, parent.proc_nr, OK);
		/* tells fs to revive parent */

	}
}

 /*==========================================================================*
 *				 do_mourn				    *
 *==========================================================================*/
PRIVATE void do_mourn (message *mourn_m)
{
/* MM has reported the death of the child. Wake up the parent. */

	/* Stage 9 */

	child.defined = FALSE;
	/* kills the child process */
	fs_reply(REVIVE, parent.proc_nr, ECHILD);
	/* revives the parent */

	mm_reply(OK);

}

/*==========================================================================*
 *				do_evaluate				    *
 *==========================================================================*/
PRIVATE void do_evaluate (message *instr_m)
{
/* Evaluate the INSTRUCTION that arrived from the parent */

  switch(instr_m -> REQUEST){
	case DEBUG_RESUME:	do_resume(instr_m);	break;
	case DEBUG_STEP:	do_step(instr_m);	break;
	case DEBUG_BREAKPNT:	do_breakpnt(instr_m);	break;
	case DEBUG_PROCADM:	do_procadm(instr_m);	break;
	default:					break;
  }
}

/*==========================================================================*
 *				do_resume				    *
 *==========================================================================*/
PRIVATE void do_resume (message *resume_m)	/* resume execution */
{
/* Let the child run to completion; the parent will terminate as well
   because it calls wait_pid (it is supposed to) */

	/* Stage 7 */

	child.rp -> p_reg.psw &= !TRACEBIT;
	/* lowering the tracebit */

	lock_ready(child.rp);
	/* put child on ready queue */

	fs_reply(TASK_REPLY, parent.proc_nr, OK);

}

/*==========================================================================*
 *				   do_step				    *
 *==========================================================================*/
PRIVATE void do_step (message *step_m)
{
  child.rp -> p_reg.psw |= TRACEBIT;
  /* sets TRACEBIT flag (using bitwise OR) in PSW of child*/

  printf("TRACEBIT RAISED\n");

  lock_ready(child.rp);
  /* adds the child to the ready queue, to run */

  fs_reply(TASK_REPLY, parent.proc_nr, SUSPEND);
  /* parent wants to display the info, but before it can do that,
     suspend parent before child is put on the ready queue */
}

/*==========================================================================*
 *				 do_breakpnt				    *
 *==========================================================================*/
PRIVATE void do_breakpnt (message *break_m)	/* set a breakpoint */
{
/* Place a breakpoint at the break_m->POSITION in the user space */

	/* Stage 8 */

	printf("Position is %s",break_m->POSITION);
	printf("Source is %s", break_m->m_source);
	printf("Type is %s", break_m->m_type);
	printf("Request is %s", break_m->REQUEST);

  if(child.defined){

	phys_bytes breakpoint_addr;
	/* physical addr of break code*/
	long child_brk_pos;
	/* position of where to insert breakpoint, relative to the start of the child code */

	breakpoint_addr = vir2phys(&break_code);
	/* sets breakpoint_addr */
	store_addr = vir2phys(&store_code);
	/* sets position of where to save child code */

	child_brk_pos = break_m -> POSITION;
	/* sets where to insert brkpnt */

	addr_umap = umap(child.rp, T, child_brk_pos, BREAKPOINT_LENGTH);
	/* calcultes pysical memory address */

	phys_copy(addr_umap, store_addr, BREAKPOINT_LENGTH);
	phys_copy(breakpoint_addr, addr_umap, BREAKPOINT_LENGTH);

	fs_reply(TASK_REPLY, parent.proc_nr, SUSPEND);

	child.rp -> p_reg.psw &= ~TRACEBIT;

	lock_ready(child.rp);
  }
  else{
	fs_reply(TASK_REPLY, parent.proc_nr, ECHILD);
  }
}

/*==========================================================================*
 *				do_procadm				    *
 *==========================================================================*/
PRIVATE void do_procadm (message *proc_m)
{
/* The parent makes contact for the first time; if the child is known, copy
 * the process administration of the child to the parent */

  /* stage 4 */

  parent.defined = TRUE;
  /* the parent is now alive */

  parent.proc_nr = proc_m -> PROC_NR;
  /* Save parent process number for future use and suspend */

  parent.rp = proc_addr(parent.proc_nr);
  /* pointer to the parent's process descriptor */

  parent.vir = proc_vir2phys(parent.rp, proc_m -> ADDRESS);
  /* proc_m -> ADDRESS is the address relative to the start of that text
     segment (in parent.rp: debug.c). p_v2p() calc. addr of where to put info
     in user space (of the parent) */

  if(child.defined){
	phys_copy(child.vir, parent.vir, (phys_bytes) PROC_LENGTH);
	printf("CHILD COPIED TO PARENT");
	fs_reply(TASK_REPLY, parent.proc_nr, OK);
  }
  else{
	fs_reply(TASK_REPLY, parent.proc_nr, SUSPEND);
  }
}

/*==========================================================================*
 *				do_interrupt				    *
 *==========================================================================*/
PRIVATE void do_interrupt()
{
/* An interrupt has occurred. Figure out what has happened, and act
 * accordingly. */

/* stage 6 */
  if(interrupt_no == SINGLE_STEP){
	step_int();
  }
  if(interrupt_no == BREAKPOINT){
	breakpoint_int();
  }
}

/*==========================================================================*
 *				breakpoint_int				    *
 *==========================================================================*/
PRIVATE void breakpoint_int(void)
{
/* The process to be debugged has reached an breakpoint. Restore the
 * original code and reset the program counter. Inform the parent. */

  printf("in debugger.c: breakpoint_int()\n");

  /* Stage 8 */
  lock_unready(child.rp);

  phys_copy(store_addr, addr_umap, BREAKPOINT_LENGTH);

  (child.rp -> p_reg.pc)--;

  phys_copy(child.vir, parent.vir, (phys_bytes) PROC_LENGTH);

  printf("CHILD COPIED TO PARENT in breakpoint_int()\n");

  fs_reply(REVIVE, parent.proc_nr, OK);

}

/*==========================================================================*
 *				 step_int				    *
 *==========================================================================*/
PRIVATE void step_int(void)
{
/* The process to be debugged has performed an assembler instruction.
 * Inform the parent. */

  printf("debugger.c:step_int()\n");

  lock_unready(child.rp);
  /* takes the child off the ready queue */

  if(parent.defined){
	phys_copy(child.vir, parent.vir, (phys_bytes) PROC_LENGTH);

	printf("CHILD COPIED TO PARENT\n");
	fs_reply(REVIVE, parent.proc_nr, OK);
  }
}

/*==========================================================================*
 *				breakpoint				    *
 *==========================================================================*/
PUBLIC int breakpoint()
{
/* The program that is debugged has reached an breakpoint. Stop the
 * execution of the process and inform the debugger */

/* Stage 8 */
  interrupt_no = BREAKPOINT;
  interrupt(DEBUGGER);
}

/*==========================================================================*
 *				  single_step				    *
 *==========================================================================*/
PUBLIC int single_step()
{
/* The program that is debugged has reached a step interrupt.
 * Stop the execution of the process and inform the debugger */
/* LOOK IN proc.c in kernel for method interrupt */

/* stage 6 */
  interrupt_no = SINGLE_STEP;
  interrupt(DEBUGGER);
}

/*==========================================================================*
 *				  init_debug				    *
 *==========================================================================*/
PRIVATE void init_debug()
{
	/* resets main data structure variables */
	parent.defined = FALSE;
	child.defined = FALSE;
}

#endif /* ENABLE_DEBUGGING */

**************************************************************************************************
**************************	fs/debug.c			**********************************
**************************************************************************************************
#include "fs.h"
#include "file.h"
#include "fproc.h"
#include "inode.h"
#include "param.h"
#include <minix/callnr.h>
#include <minix/com.h>

#if ENABLE_DEBUGGING

PUBLIC int do_debug(){

  printf("This is the address: %d\n", m.ADDRESS);
  printf("This is the request: %d\n", m.REQUEST);
  printf("This is the position: %dl\n", m.POSITION);

  printf("Entered do_debug() in fs\n");

  m.PROC_NR = who;
  m.m_source = FS_PROC_NR;

  switch(m.REQUEST){
	case DEBUG_START:{
      		printf("fs: DEBUG_START\n");
    		sendrec(MM_PROC_NR, &m);
		/* forwarding from FS to MM */
 		printf("fs(debug_start): MESSAGE RETURN FROM MM\n");
		break;
	}

	/* stage 4 */
	case DEBUG_PROCADM:{
		m.m_type = INSTRUCTION;
		printf("fs: DEBUG_PROCADM\n");
		sendrec(DEBUGGER, &m);
		printf("fs(debug_procadm): MESSAGE RETURNED FROM DEBUGGER\n");

		if(m.REP_STATUS == SUSPEND){
			suspend(DEBUGGER);
		}
		break;
	}

	/* stage 6 */
	case DEBUG_STEP:{
		m.m_type = INSTRUCTION;
		printf("fs: DEBUG_STEP\n");
		sendrec(DEBUGGER, &m);
		printf("fs(debug_step): MESSAGE RETURNED FROM DEBUGGER\n");
		if(m.REP_STATUS == SUSPEND)
		{
			suspend(DEBUGGER);
			printf("PARENT SUSPENDED\n");
		}
		break;
	}

	case DEBUG_BREAKPNT:{
		m.m_type = INSTRUCTION;
		printf("fs: DEBUG_BREAKPNT");
		sendrec(DEBUGGER, &m);
		if (m.REP_STATUS == SUSPEND) {
			suspend(DEBUGGER);
		}
		printf("fs(debug_breakpnt): MESSAGE RETURNED FROM DEBUGGER\n");
		break;
	}

	case DEBUG_RESUME:{
		m.m_type = INSTRUCTION;
		printf("fs: DEBUG_RESUME\n");
		sendrec(DEBUGGER, &m);
		printf("fs(debug_resume): MESSAGE RETURNED FROM DEBUGGER\n");
		break;
	}
	default:{
		printf("UNRECOGNISED REQUEST\n");
		break;
	}
  }
  return OK;
}
#endif

**************************************************************************************************
**************************	lib/posix/_debug.c	**********************************
**************************************************************************************************
#include <lib.h>
#include </usr/include/minix/config.h>
#include </usr/include/minix/com.h>

#define debug _debug

#if ENABLE_DEBUGGING

PUBLIC int debug(char * pointer, int integer, long address){
  message mess;
  /* Creates a message which will contain the above parameters */

  mess.ADDRESS = pointer;
  /* The place where the Program Discriptor (PD) of the child is copied to */
  mess.REQUEST = integer;
  /* The request that is passed to the task */
  mess.POSITION = address;
  /* The place where to put the break-point in the child's code, ONLY if integer is DEBUG_BREAKPOINT */

  return(_syscall(FS, DEBUG, &mess));
  /* Sends a the address of mess to FS of type DEBUG */
}

#endif

**************************************************************************************************
**************************	mm/debugstart.c			**********************************
**************************************************************************************************
#include <minix/com.h>
#include "mm.h"
#include <signal.h>
#include "mproc.h"
#include "glo.h"
#include <minix/type.h>

#if ENABLE_DEBUGGING
PUBLIC int do_debugstart(){

  int child_procNo = mm_in.PROC_NR;
  printf("child process number: %d\n", child_procNo);
  mproc[child_procNo].mp_flags |= DEBUG_FLAG;
  printf("do_debugstart: FLAG RAISED\n");
  return OK;
}
#endif
