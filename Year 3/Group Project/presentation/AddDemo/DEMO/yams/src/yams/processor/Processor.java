/*
 * Created on 09-Nov-2003
 *
 */
package yams.processor;
import java.io.InputStream;
import java.io.PrintStream;
import yams.*;

/**
 * The overall processor class. Creates and initialises processor components such
 * as the memory, registers and instruction decoder. Provides access to the managers
 * also.
 * 
 * @author sw00
 */
public class Processor {

	public CycleManagerInterface cycleManager;
	public RegisterManagerInterface registerManager;
	public MemoryManagerInterface memoryManager;
	public StatisticsManagerInterface statisticsManager;
	
	private YAMSController controller;
	private InstructionDecoderInterface instructionDecoder;
	private InstructionHandlerInterface instructionHandler;	
	private InstructionHandlerInterface syscallHandler;
	private PrintStream verbose;

	/**
	 * Creates a new processor.
	 * @param controller
	 */
	public Processor(YAMSController yamscontroller, InputStream in, PrintStream out, PrintStream verbose) {
		this.controller = yamscontroller;
		this.verbose = verbose;
		memoryManager = new MemoryManager(0x400000, 0x10000000, 0x7fffffff, verbose, yamscontroller);
		statisticsManager = new StatisticsManager(out, this);
		registerManager = new RegisterManager(statisticsManager, yamscontroller);
		
		// handlers, will be autogenerated Java files from templates
		instructionHandler = new InstructionHandler(registerManager,memoryManager, statisticsManager, out, verbose);
		syscallHandler = new SyscallHandler(registerManager,memoryManager, statisticsManager, in, out, verbose);
				
		instructionDecoder = new InstructionDecoder(instructionHandler,	syscallHandler);
		cycleManager = new CycleManager(controller,registerManager,memoryManager,statisticsManager,instructionDecoder, out, verbose);
		syscallHandler.setCycleManager(cycleManager);
		
		verbose.println("Processor ready");
		
		// controller should now call cycleManager.jump(addr) to the start of code
		// and then cycleManager.start() to begin execution
	} 
	
	/**
	 * Reset the processor (the memory, register and statistics managers)
	 */
	public void reset() {
		memoryManager.reset();
		registerManager.reset();
		statisticsManager.reset();
		cycleManager.reset();
	}
	
	public void setVerbose(PrintStream verbose) {
		this.verbose = verbose;
		memoryManager.setVerbose(verbose);
		instructionHandler.setVerbose(verbose);
		syscallHandler.setVerbose(verbose);
		cycleManager.setVerbose(verbose);
	}
	
}
