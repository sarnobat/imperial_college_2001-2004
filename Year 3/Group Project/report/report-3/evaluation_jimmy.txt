Extensions

The initial design stages for the project detailed not only the core requirements of the final product, but also included potential extensions that could feasibly be reached during the implementation of YAMS. Some of these extensions were achieved during the YAMS development, while others were not. These, along with other extensions developed along the way, will be outlined in the following section:

Achieved Extensions:

1 Extra Statistics

Extra statistics, such as a tentative method of keeping count of the loops used in the code was correctly implemented within the console and GUI versions of the program. This was achieved by the Statistics Manager keeping count of the number of times any given line was executed by the processor. It was then possible to identify where the majority of processor time was being spent during any given exeuction.

Another extension correctly implemented was keeping count of the number of times that any type of instruction was executed within any given execution. This was written into the underlying console version, and then tied into the GUI version as well.

2 Graphical Representations Of Statistics

A further extension that would prove to be very effective in the final product was the graphical representation of statistical counts - represented as histograms. The regsister counts, instruction counts and line counts were all represented in the GUI using this method. This proved to be very effective for understanding what was going on in the underlying MIPS code. 

3 Statistical Comparison

Another supported extension was the ability to be able to compare statistics from different runs of the programs. In the console version this was achieved through outputing a comma-separated file containing comparative statistics on number of cycles required for running these programs. Additionally, this file could be imported into Excel and a comparison graph very quickly created for visual comparison.

In the GUI version of YAMS, it is possible to display the statistical graphs for one program next to those for another. Once again, this is another effective method for viewing the efficiency of the compilers that generate the MIPS code.

4 Multiple File Handling

In both the console and GUI versions, YAMS provides functionality to allow the user to run the simulator with multiple files, through loading a file list. Additionally, within the GUI version, selection of specific programs from this list is also possible.

5 XML Repository

A significant integration point for YAMS was to be able to have a single XML Repository of instructions, and allow all software components to refer to these sections. This was achieved during the last phase of project development:

Parser - Have handlers to recognise and validify instructions, autogenerated from the XML File through XSLT Transformation.
Assembler - Reads information live from XML File into Object Tables for use during assembly.
Processor - Handlers for executing instructions autogenerated from XML file.

This extension required use of XML, DOM, XSLT and ANT technologies. Setting up these different technologies to work within the YAMS framework while still making it easy to add instruction proved to be a significant point of achievement within the project timeline.

Extensions Not Achieved

1 Full MIPS R3000 Support

It was not possible to implement the full MIPS instruction set for all areas of YAMS. NOTE: The handlers for all instructions  within the processor were in fact completed, however the Assembler / Parser data was not available by the end of the project timeline for all of these. Therefore these are ommitted from the final project build.

It should be noted that the flexibility provided by using the XML file means that these instructions could quite esily be added at some point in the future.

2 Directives Hard-Coded

In addition to not supporting all the instructions, the Assembler Directives e.g. .asciiz were in fact hardcoded into the Assembler. It was envisaged that at some point these could be transferred to the XML File as code. This would have meant further XSLT transformations and extended the "ant" build, and this could not be achieved in the time alotted.

This would require more modifications to the code of the Assembler to able to implement this extension in the future.

3 Help Descriptions

It was also planned that help entries for each of the instructions could be added to the XML Instruction Repository along with the other instruction information. This was partially implemented, and it can be seen in the XML that the tags for the help section are in fact present. However, further XSLT transformations would be required to generate HTML Help Files from this data. Other "help" is available within YAMS, and it was planned to extend this help feature with more information regarding every instruction supported. This was not achieved, but once again could be a future modification. 

4 Graphical Memory Statistics

This extension was partially completed. It was not possible to implement graphical representations of the exact memory usage for each MIPS file executed. However, the StatisticsManager does indeed keep track of the total amount of memory used during a run and display it numerically. It would require some modification to the GUI to enable this feature, but would not be an extensive change since it would mean simply adding another graph to the "Graphs" pane.
