head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2003.10.31.14.34.33;	author qq01;	state dead;
branches;
next	1.1;

1.1
date	2003.10.30.18.24.07;	author qq01;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@// $ANTLR : "lexrules.g" -> "WhateverLexer.java"$

import java.io.InputStream;
import antlr.TokenStreamException;
import antlr.TokenStreamIOException;
import antlr.TokenStreamRecognitionException;
import antlr.CharStreamException;
import antlr.CharStreamIOException;
import antlr.ANTLRException;
import java.io.Reader;
import java.util.Hashtable;
import antlr.CharScanner;
import antlr.InputBuffer;
import antlr.ByteBuffer;
import antlr.CharBuffer;
import antlr.Token;
import antlr.CommonToken;
import antlr.RecognitionException;
import antlr.NoViableAltForCharException;
import antlr.MismatchedCharException;
import antlr.TokenStream;
import antlr.ANTLRHashString;
import antlr.LexerSharedInputState;
import antlr.collections.impl.BitSet;
import antlr.SemanticException;

public class WhateverLexer extends antlr.CharScanner implements WhateverLexerTokenTypes, TokenStream
 {
public WhateverLexer(InputStream in) {
	this(new ByteBuffer(in));
}
public WhateverLexer(Reader in) {
	this(new CharBuffer(in));
}
public WhateverLexer(InputBuffer ib) {
	this(new LexerSharedInputState(ib));
}
public WhateverLexer(LexerSharedInputState state) {
	super(state);
	caseSensitiveLiterals = true;
	setCaseSensitive(true);
	literals = new Hashtable();
	literals.put(new ANTLRHashString("a0", this), new Integer(99));
	literals.put(new ANTLRHashString("t4", this), new Integer(107));
	literals.put(new ANTLRHashString("$t2", this), new Integer(138));
	literals.put(new ANTLRHashString(",", this), new Integer(14));
	literals.put(new ANTLRHashString("$s8", this), new Integer(158));
	literals.put(new ANTLRHashString("$v1", this), new Integer(131));
	literals.put(new ANTLRHashString("t3", this), new Integer(106));
	literals.put(new ANTLRHashString(".align", this), new Integer(56));
	literals.put(new ANTLRHashString("$t1", this), new Integer(137));
	literals.put(new ANTLRHashString(".mask", this), new Integer(64));
	literals.put(new ANTLRHashString("+", this), new Integer(17));
	literals.put(new ANTLRHashString("$s7", this), new Integer(151));
	literals.put(new ANTLRHashString("$fp", this), new Integer(159));
	literals.put(new ANTLRHashString("abs", this), new Integer(161));
	literals.put(new ANTLRHashString("noreorder", this), new Integer(43));
	literals.put(new ANTLRHashString("", this), new Integer(87));
	literals.put(new ANTLRHashString("zero", this), new Integer(96));
	literals.put(new ANTLRHashString("$v0", this), new Integer(130));
	literals.put(new ANTLRHashString("t2", this), new Integer(105));
	literals.put(new ANTLRHashString(".float", this), new Integer(30));
	literals.put(new ANTLRHashString("$t0", this), new Integer(136));
	literals.put(new ANTLRHashString(".aent", this), new Integer(63));
	literals.put(new ANTLRHashString("s8", this), new Integer(125));
	literals.put(new ANTLRHashString("*", this), new Integer(84));
	literals.put(new ANTLRHashString("$s6", this), new Integer(150));
	literals.put(new ANTLRHashString(".ascii", this), new Integer(23));
	literals.put(new ANTLRHashString("novolatile", this), new Integer(41));
	literals.put(new ANTLRHashString(".ent", this), new Integer(62));
	literals.put(new ANTLRHashString("$ra", this), new Integer(160));
	literals.put(new ANTLRHashString("v1", this), new Integer(98));
	literals.put(new ANTLRHashString("t1", this), new Integer(104));
	literals.put(new ANTLRHashString(".gjrlive", this), new Integer(75));
	literals.put(new ANTLRHashString(".double", this), new Integer(31));
	literals.put(new ANTLRHashString("nobopt", this), new Integer(49));
	literals.put(new ANTLRHashString("s7", this), new Integer(118));
	literals.put(new ANTLRHashString("fp", this), new Integer(126));
	literals.put(new ANTLRHashString(")", this), new Integer(16));
	literals.put(new ANTLRHashString("$s5", this), new Integer(149));
	literals.put(new ANTLRHashString(".livereg", this), new Integer(77));
	literals.put(new ANTLRHashString("macro", this), new Integer(46));
	literals.put(new ANTLRHashString("v0", this), new Integer(97));
	literals.put(new ANTLRHashString("nomove", this), new Integer(51));
	literals.put(new ANTLRHashString("t0", this), new Integer(103));
	literals.put(new ANTLRHashString("add", this), new Integer(162));
	literals.put(new ANTLRHashString("$at", this), new Integer(129));
	literals.put(new ANTLRHashString("s6", this), new Integer(117));
	literals.put(new ANTLRHashString(".rdata", this), new Integer(54));
	literals.put(new ANTLRHashString("(", this), new Integer(15));
	literals.put(new ANTLRHashString("$s4", this), new Integer(148));
	literals.put(new ANTLRHashString("ra", this), new Integer(127));
	literals.put(new ANTLRHashString(".byte", this), new Integer(27));
	literals.put(new ANTLRHashString(".word", this), new Integer(29));
	literals.put(new ANTLRHashString("~", this), new Integer(91));
	literals.put(new ANTLRHashString(".fmask", this), new Integer(65));
	literals.put(new ANTLRHashString("s5", this), new Integer(116));
	literals.put(new ANTLRHashString(".gjaldef", this), new Integer(74));
	literals.put(new ANTLRHashString("$s3", this), new Integer(147));
	literals.put(new ANTLRHashString("$t9", this), new Integer(153));
	literals.put(new ANTLRHashString("reorder", this), new Integer(42));
	literals.put(new ANTLRHashString(".noalias", this), new Integer(78));
	literals.put(new ANTLRHashString(".half", this), new Integer(28));
	literals.put(new ANTLRHashString("at", this), new Integer(44));
	literals.put(new ANTLRHashString("$sp", this), new Integer(157));
	literals.put(new ANTLRHashString(".end", this), new Integer(68));
	literals.put(new ANTLRHashString("s4", this), new Integer(115));
	literals.put(new ANTLRHashString("&", this), new Integer(88));
	literals.put(new ANTLRHashString("$s2", this), new Integer(146));
	literals.put(new ANTLRHashString("$t8", this), new Integer(152));
	literals.put(new ANTLRHashString(".endb", this), new Integer(71));
	literals.put(new ANTLRHashString(".frame", this), new Integer(66));
	literals.put(new ANTLRHashString("| ", this), new Integer(90));
	literals.put(new ANTLRHashString(".galive", this), new Integer(73));
	literals.put(new ANTLRHashString(".space", this), new Integer(26));
	literals.put(new ANTLRHashString(".globl", this), new Integer(57));
	literals.put(new ANTLRHashString("volatile", this), new Integer(40));
	literals.put(new ANTLRHashString("s3", this), new Integer(114));
	literals.put(new ANTLRHashString("t9", this), new Integer(120));
	literals.put(new ANTLRHashString("%", this), new Integer(86));
	literals.put(new ANTLRHashString("$s1", this), new Integer(145));
	literals.put(new ANTLRHashString("$a3", this), new Integer(135));
	literals.put(new ANTLRHashString("$t7", this), new Integer(143));
	literals.put(new ANTLRHashString("$gp", this), new Integer(156));
	literals.put(new ANTLRHashString("flag", this), new Integer(80));
	literals.put(new ANTLRHashString(".sdata", this), new Integer(55));
	literals.put(new ANTLRHashString("sp", this), new Integer(124));
	literals.put(new ANTLRHashString(".extern", this), new Integer(58));
	literals.put(new ANTLRHashString("$k1", this), new Integer(155));
	literals.put(new ANTLRHashString("s2", this), new Integer(113));
	literals.put(new ANTLRHashString("t8", this), new Integer(119));
	literals.put(new ANTLRHashString("$s0", this), new Integer(144));
	literals.put(new ANTLRHashString("$a2", this), new Integer(134));
	literals.put(new ANTLRHashString("$t6", this), new Integer(142));
	literals.put(new ANTLRHashString("nomacro", this), new Integer(47));
	literals.put(new ANTLRHashString("bopt", this), new Integer(48));
	literals.put(new ANTLRHashString(".vreg", this), new Integer(82));
	literals.put(new ANTLRHashString(".lcomm", this), new Integer(61));
	literals.put(new ANTLRHashString(".text", this), new Integer(52));
	literals.put(new ANTLRHashString(".alias", this), new Integer(69));
	literals.put(new ANTLRHashString(".verstamp", this), new Integer(81));
	literals.put(new ANTLRHashString("$k0", this), new Integer(154));
	literals.put(new ANTLRHashString("s1", this), new Integer(112));
	literals.put(new ANTLRHashString(".asciiz", this), new Integer(25));
	literals.put(new ANTLRHashString("move", this), new Integer(50));
	literals.put(new ANTLRHashString("a3", this), new Integer(102));
	literals.put(new ANTLRHashString("t7", this), new Integer(110));
	literals.put(new ANTLRHashString("$a1", this), new Integer(133));
	literals.put(new ANTLRHashString("gp", this), new Integer(123));
	literals.put(new ANTLRHashString("$t5", this), new Integer(141));
	literals.put(new ANTLRHashString(".option", this), new Integer(79));
	literals.put(new ANTLRHashString(".bgnb", this), new Integer(70));
	literals.put(new ANTLRHashString("/", this), new Integer(85));
	literals.put(new ANTLRHashString(".lab", this), new Integer(76));
	literals.put(new ANTLRHashString(";", this), new Integer(12));
	literals.put(new ANTLRHashString("k1", this), new Integer(122));
	literals.put(new ANTLRHashString(".set", this), new Integer(39));
	literals.put(new ANTLRHashString("s0", this), new Integer(111));
	literals.put(new ANTLRHashString("a2", this), new Integer(101));
	literals.put(new ANTLRHashString("t6", this), new Integer(109));
	literals.put(new ANTLRHashString("$a0", this), new Integer(132));
	literals.put(new ANTLRHashString("$t4", this), new Integer(140));
	literals.put(new ANTLRHashString(".comm", this), new Integer(60));
	literals.put(new ANTLRHashString(".file", this), new Integer(72));
	literals.put(new ANTLRHashString(".", this), new Integer(22));
	literals.put(new ANTLRHashString(":", this), new Integer(32));
	literals.put(new ANTLRHashString("$zero", this), new Integer(128));
	literals.put(new ANTLRHashString("k0", this), new Integer(121));
	literals.put(new ANTLRHashString("a1", this), new Integer(100));
	literals.put(new ANTLRHashString("t5", this), new Integer(108));
	literals.put(new ANTLRHashString("!", this), new Integer(92));
	literals.put(new ANTLRHashString("$t3", this), new Integer(139));
	literals.put(new ANTLRHashString(".data", this), new Integer(53));
	literals.put(new ANTLRHashString("-", this), new Integer(18));
	literals.put(new ANTLRHashString("noat", this), new Integer(45));
	literals.put(new ANTLRHashString("^", this), new Integer(89));
}

public Token nextToken() throws TokenStreamException {
	Token theRetToken=null;
tryAgain:
	for (;;) {
		Token _token = null;
		int _ttype = Token.INVALID_TYPE;
		resetText();
		try {   // for char stream error handling
			try {   // for lexical error handling
				switch ( LA(1)) {
				case 'A':  case 'B':  case 'C':  case 'D':
				case 'E':  case 'F':  case 'G':  case 'H':
				case 'I':  case 'J':  case 'K':  case 'L':
				case 'M':  case 'N':  case 'O':  case 'P':
				case 'Q':  case 'R':  case 'S':  case 'T':
				case 'U':  case 'V':  case 'W':  case 'X':
				case 'Y':  case 'Z':  case 'a':  case 'b':
				case 'c':  case 'd':  case 'e':  case 'f':
				case 'g':  case 'h':  case 'i':  case 'j':
				case 'k':  case 'l':  case 'm':  case 'n':
				case 'o':  case 'p':  case 'q':  case 'r':
				case 's':  case 't':  case 'u':  case 'v':
				case 'w':  case 'x':  case 'y':  case 'z':
				{
					mIDENTIFIER(true);
					theRetToken=_returnToken;
					break;
				}
				case ':':
				{
					mCOLON(true);
					theRetToken=_returnToken;
					break;
				}
				case '=':
				{
					mEQUAL(true);
					theRetToken=_returnToken;
					break;
				}
				case '.':
				{
					mPOINT(true);
					theRetToken=_returnToken;
					break;
				}
				default:
					if (((LA(1) >= '0' && LA(1) <= '9')) && (_tokenSet_0.member(LA(2))) && (_tokenSet_0.member(LA(3))) && (true) && (true)) {
						mFLOAT(true);
						theRetToken=_returnToken;
					}
					else if ((LA(1)=='$') && ((LA(2) >= '0' && LA(2) <= '9'))) {
						mDOLLAR_F_DECIMAL(true);
						theRetToken=_returnToken;
					}
					else if ((LA(1)=='$') && (true)) {
						mDOLLAR(true);
						theRetToken=_returnToken;
					}
					else if (((LA(1) >= '0' && LA(1) <= '9')) && (true) && (true) && (true) && (true)) {
						mDECIMAL(true);
						theRetToken=_returnToken;
					}
				else {
					if (LA(1)==EOF_CHAR) {uponEOF(); _returnToken = makeToken(Token.EOF_TYPE);}
				else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
				}
				}
				if ( _returnToken==null ) continue tryAgain; // found SKIP token
				_ttype = _returnToken.getType();
				_ttype = testLiteralsTable(_ttype);
				_returnToken.setType(_ttype);
				return _returnToken;
			}
			catch (RecognitionException e) {
				throw new TokenStreamRecognitionException(e);
			}
		}
		catch (CharStreamException cse) {
			if ( cse instanceof CharStreamIOException ) {
				throw new TokenStreamIOException(((CharStreamIOException)cse).io);
			}
			else {
				throw new TokenStreamException(cse.getMessage());
			}
		}
	}
}

	public final void mIDENTIFIER(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = IDENTIFIER;
		int _saveIndex;
		
		{
		int _cnt3784=0;
		_loop3784:
		do {
			switch ( LA(1)) {
			case 'a':  case 'b':  case 'c':  case 'd':
			case 'e':  case 'f':  case 'g':  case 'h':
			case 'i':  case 'j':  case 'k':  case 'l':
			case 'm':  case 'n':  case 'o':  case 'p':
			case 'q':  case 'r':  case 's':  case 't':
			case 'u':  case 'v':  case 'w':  case 'x':
			case 'y':  case 'z':
			{
				matchRange('a','z');
				break;
			}
			case 'A':  case 'B':  case 'C':  case 'D':
			case 'E':  case 'F':  case 'G':  case 'H':
			case 'I':  case 'J':  case 'K':  case 'L':
			case 'M':  case 'N':  case 'O':  case 'P':
			case 'Q':  case 'R':  case 'S':  case 'T':
			case 'U':  case 'V':  case 'W':  case 'X':
			case 'Y':  case 'Z':
			{
				matchRange('A','Z');
				break;
			}
			default:
			{
				if ( _cnt3784>=1 ) { break _loop3784; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			}
			_cnt3784++;
		} while (true);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mCOLON(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = COLON;
		int _saveIndex;
		
		match(':');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mDOLLAR(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = DOLLAR;
		int _saveIndex;
		
		match('$');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mEQUAL(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = EQUAL;
		int _saveIndex;
		
		match('=');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mDECIMAL(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = DECIMAL;
		int _saveIndex;
		
		{
		int _cnt3790=0;
		_loop3790:
		do {
			if (((LA(1) >= '0' && LA(1) <= '9'))) {
				matchRange('0','9');
			}
			else {
				if ( _cnt3790>=1 ) { break _loop3790; } else {throw new NoViableAltForCharException((char)LA(1), getFilename(), getLine(), getColumn());}
			}
			
			_cnt3790++;
		} while (true);
		}
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mPOINT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = POINT;
		int _saveIndex;
		
		match('.');
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mFLOAT(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = FLOAT;
		int _saveIndex;
		
		mDECIMAL(false);
		mPOINT(false);
		mDECIMAL(false);
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	public final void mDOLLAR_F_DECIMAL(boolean _createToken) throws RecognitionException, CharStreamException, TokenStreamException {
		int _ttype; Token _token=null; int _begin=text.length();
		_ttype = DOLLAR_F_DECIMAL;
		int _saveIndex;
		
		mDOLLAR(false);
		mDECIMAL(false);
		if ( _createToken && _token==null && _ttype!=Token.SKIP ) {
			_token = makeToken(_ttype);
			_token.setText(new String(text.getBuffer(), _begin, text.length()-_begin));
		}
		_returnToken = _token;
	}
	
	
	private static final long[] mk_tokenSet_0() {
		long[] data = { 288019269919178752L, 0L, 0L};
		return data;
	}
	public static final BitSet _tokenSet_0 = new BitSet(mk_tokenSet_0());
	
	}
@


1.1
log
@Test parser
@
text
@@

