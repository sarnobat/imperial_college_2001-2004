head	1.8;
access;
symbols;
locks; strict;
comment	@# @;


1.8
date	2003.11.10.10.57.51;	author qq01;	state dead;
branches;
next	1.7;

1.7
date	2003.11.10.00.06.33;	author qq01;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.08.23.18.57;	author qq01;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.08.17.39.26;	author qq01;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.08.02.58.09;	author qq01;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.08.02.29.01;	author qq01;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.06.16.58.46;	author qq01;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.04.20.58.25;	author qq01;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Updated package structure.
@
text
@/*
 * Created on 2003-11-1
 */
package parser;

//import java.util.Vector;

/**
 * Parses the users file. Invokes the <code>MIPSLexer</code> automatically.
 * 
 * @@author Qian Qiao <a href="qq01@@doc.ic.ac.uk">qq01@@doc.ic.ac.uk</a>
 */
public class MIPSParser {
	//	private Vector instructions;
	private InstructionList instructionList;
	private Token currentToken;
	private int instructionCount;

	private void match(MIPSLexer lexer, int expected)
		throws ParseException, LexerException {
		if (currentToken.getType() == expected) {
			currentToken = lexer.nextToken();
		} else {
			throw new ParseException(
				currentToken,
				expected,
				lexer.getLineNumber());
		}
	}

	/**
	 * Parses the program, returns a <code>InstructionList</code> object representing
	 * the user's program.
	 * 
	 * @@param sourceProgram the source program
	 * @@return a <code>InstructionList</code> object representing user's program.
	 * @@throws LexerException
	 * @@throws ParseException
	 */
	public InstructionList parseProgram(String sourceProgram)
		throws LexerException, ParseException {
		MIPSLexer lexer = new MIPSLexer(sourceProgram);
		instructionList = new InstructionList();

		currentToken = lexer.nextToken();
		instructionCount = 0;

		while (currentToken.getType() != MIPSLexer.EOF) {
			if (currentToken.getType() == MIPSLexer.NEWLINE) {
				match(lexer, MIPSLexer.NEWLINE);
			} else {
				instructionList.appendLine(
					new Line(lexer.getLineNumber(), parseInstruction(lexer)));
				currentToken = lexer.nextToken();
				match(lexer, MIPSLexer.NEWLINE);
				instructionCount++;
			}
		}

		return instructionList;
	}

	//	/**
	//	 * @@param sourceProgram
	//	 * @@return
	//	 * @@throws LexerException
	//	 * @@throws ParseException
	//	 * @@deprecated
	//	 */
	//	public Instruction[] parseProgram1(String sourceProgram)
	//		throws LexerException, ParseException {
	//		MIPSLexer lexer = new MIPSLexer(sourceProgram);
	//		instructions = new Vector();
	//		currentToken = lexer.nextToken();
	//		instructionCount = 0;
	//		while (currentToken.getType() != MIPSLexer.EOF) {
	//			if (currentToken.getType() == MIPSLexer.NEWLINE) {
	//				match(lexer, MIPSLexer.NEWLINE);
	//				continue;
	//			}
	//			instructions.addElement(parseInstruction(lexer));
	//			currentToken = lexer.nextToken();
	//			match(lexer, MIPSLexer.NEWLINE);
	//			instructionCount++;
	//		}
	//		Instruction[] result = new Instruction[instructions.size()];
	//		for (int i = result.length; --i >= 0;) {
	//			result[i] = (Instruction) instructions.elementAt(i);
	//		}
	//		return result;
	//	}

	private Instruction parseInstruction(MIPSLexer lexer)
		throws ParseException, LexerException {
		if (currentToken.getValue().equals("ADD")) {
			return new RInstruction("ADD", lexer, 3);
		} else {
			return null;
		}
	}

	//	private Instruction parseInstruction1(MIPSLexer lexer)
	//		throws ParseException, LexerException {
	//		if (currentToken.getValue().equals("ADDI")) {
	//			return new ADDI(lexer, instructionCount);
	//		} else if (currentToken.value.equals("ADD")) {
	//			return new ADD(lexer, instructionCount);
	//		} else if (currentToken.value.equals("ANDI")) {
	//			return new ANDI(lexer, instructionCount);
	//		} else if (currentToken.value.equals("AND")) {
	//			return new AND(lexer, instructionCount);
	//		} else if (currentToken.value.equals("BEQ")) {
	//			return new BEQ(lexer, instructionCount);
	//		} else if (currentToken.value.equals("BNE")) {
	//			return new BNE(lexer, instructionCount);
	//		} else if (currentToken.value.equals("LUI")) {
	//			return new LUI(lexer, instructionCount);
	//		} else if (currentToken.value.equals("JAL")) {
	//			return new JAL(lexer, instructionCount);
	//		} else if (currentToken.value.equals("J")) {
	//			return new J(lexer, instructionCount);
	//		} else if (currentToken.value.equals("JR")) {
	//			return new JR(lexer, instructionCount);
	//		} else if (currentToken.value.equals("LW")) {
	//			return new LW(lexer, instructionCount);
	//		} else if (currentToken.value.equals("ORI")) {
	//			return new ORI(lexer, instructionCount);
	//		} else if (currentToken.value.equals("OR")) {
	//			return new OR(lexer, instructionCount);
	//		} else if (currentToken.value.equals("SLL")) {
	//			return new SLL(lexer, instructionCount);
	//		} else if (currentToken.value.equals("SRL")) {
	//			return new SRL(lexer, instructionCount);
	//		} else if (currentToken.value.equals("SLTI")) {
	//			return new SLTI(lexer, instructionCount);
	//		} else if (currentToken.value.equals("SLT")) {
	//			return new SLT(lexer, instructionCount);
	//		} else if (currentToken.value.equals("STOP")) {
	//			return new STOP(lexer, instructionCount);
	//		} else if (currentToken.value.equals("SUBI")) {
	//			return new SUBI(lexer, instructionCount);
	//		} else if (currentToken.value.equals("SUB")) {
	//			return new SUB(lexer, instructionCount);
	//		} else if (currentToken.value.equals("SW")) {
	//			return new SW(lexer, instructionCount);
	//		}
	//		// none of the above - try equ and equr
	//		String temp = currentToken.value;
	//		int tempLine = lexer.getLineNumber();
	//		Token tok1 = currentToken;
	//		match(lexer, MIPSLexer.IDENTIFIER);
	//		if (currentToken.value.equals("EQUR")) {
	//			return new EQUR(instructionCount, tok1.value, lexer);
	//		} else if (currentToken.value.equals("EQU")) {
	//			return new EQU(instructionCount, tok1.value, lexer);
	//		} else if (currentToken.type == MIPSLexer.COLON) {
	//			Instruction instr;
	//			try {
	//				instr = parseInstruction(lexer);
	//			} catch (Exception e) {
	//				instr = new NOP(instructionCount);
	//			}
	//			instr.setLabel(temp);
	//			return instr;
	//
	//		}
	//		/*
	//		Instruction instr = parseLabelledInstruction( lexer );
	//		if( instr != null )
	//		{
	//			return instr;
	//		}
	//		*/
	//		throw new ParseException("Unknown mnemonic:" + temp, tempLine);
	//	}

	private Instruction parseLabelledInstruction(MIPSLexer lexer)
		throws ParseException, LexerException {
		String temp = currentToken.getValue();
		match(lexer, MIPSLexer.IDENTIFIER);
		if (currentToken.getType() == MIPSLexer.COLON) {
			Instruction instr;
			try {
				instr = parseInstruction(lexer);
			} catch (Exception e) {
				instr = new NOP(instructionCount);
			}
			instr.setLabel(temp);
			return instr;
		}
		return null;
	}

	//	public static void main(String[] args) {
	//		MIPSParser parser = new MIPSParser();
	//		try {
	//			parser.parseProgram("LW $t1, a65520($zero)\n");
	//		} catch (Exception e) {
	//			System.out.println(e);
	//		}
	//	}
}
@


1.7
log
@Updated parser classes and some instruction definitions
@
text
@@


1.6
log
@Updated some methods and documentation of the methods
@
text
@d6 1
a6 1
import java.util.Vector;
d14 1
a14 1
	private Vector instructions;
d63 29
a91 29
	/**
	 * @@param sourceProgram
	 * @@return
	 * @@throws LexerException
	 * @@throws ParseException
	 * @@deprecated
	 */
	public Instruction[] parseProgram1(String sourceProgram)
		throws LexerException, ParseException {
		MIPSLexer lexer = new MIPSLexer(sourceProgram);
		instructions = new Vector();
		currentToken = lexer.nextToken();
		instructionCount = 0;
		while (currentToken.getType() != MIPSLexer.EOF) {
			if (currentToken.getType() == MIPSLexer.NEWLINE) {
				match(lexer, MIPSLexer.NEWLINE);
				continue;
			}
			instructions.addElement(parseInstruction(lexer));
			currentToken = lexer.nextToken();
			match(lexer, MIPSLexer.NEWLINE);
			instructionCount++;
		}
		Instruction[] result = new Instruction[instructions.size()];
		for (int i = result.length; --i >= 0;) {
			result[i] = (Instruction) instructions.elementAt(i);
		}
		return result;
	}
d95 5
a99 1
		return null;
d102 74
a175 74
	private Instruction parseInstruction1(MIPSLexer lexer)
		throws ParseException, LexerException {
		if (currentToken.getValue().equals("ADDI")) {
			return new ADDI(lexer, instructionCount);
		} else if (currentToken.value.equals("ADD")) {
			return new ADD(lexer, instructionCount);
		} else if (currentToken.value.equals("ANDI")) {
			return new ANDI(lexer, instructionCount);
		} else if (currentToken.value.equals("AND")) {
			return new AND(lexer, instructionCount);
		} else if (currentToken.value.equals("BEQ")) {
			return new BEQ(lexer, instructionCount);
		} else if (currentToken.value.equals("BNE")) {
			return new BNE(lexer, instructionCount);
		} else if (currentToken.value.equals("LUI")) {
			return new LUI(lexer, instructionCount);
		} else if (currentToken.value.equals("JAL")) {
			return new JAL(lexer, instructionCount);
		} else if (currentToken.value.equals("J")) {
			return new J(lexer, instructionCount);
		} else if (currentToken.value.equals("JR")) {
			return new JR(lexer, instructionCount);
		} else if (currentToken.value.equals("LW")) {
			return new LW(lexer, instructionCount);
		} else if (currentToken.value.equals("ORI")) {
			return new ORI(lexer, instructionCount);
		} else if (currentToken.value.equals("OR")) {
			return new OR(lexer, instructionCount);
		} else if (currentToken.value.equals("SLL")) {
			return new SLL(lexer, instructionCount);
		} else if (currentToken.value.equals("SRL")) {
			return new SRL(lexer, instructionCount);
		} else if (currentToken.value.equals("SLTI")) {
			return new SLTI(lexer, instructionCount);
		} else if (currentToken.value.equals("SLT")) {
			return new SLT(lexer, instructionCount);
		} else if (currentToken.value.equals("STOP")) {
			return new STOP(lexer, instructionCount);
		} else if (currentToken.value.equals("SUBI")) {
			return new SUBI(lexer, instructionCount);
		} else if (currentToken.value.equals("SUB")) {
			return new SUB(lexer, instructionCount);
		} else if (currentToken.value.equals("SW")) {
			return new SW(lexer, instructionCount);
		}
		// none of the above - try equ and equr
		String temp = currentToken.value;
		int tempLine = lexer.getLineNumber();
		Token tok1 = currentToken;
		match(lexer, MIPSLexer.IDENTIFIER);
		if (currentToken.value.equals("EQUR")) {
			return new EQUR(instructionCount, tok1.value, lexer);
		} else if (currentToken.value.equals("EQU")) {
			return new EQU(instructionCount, tok1.value, lexer);
		} else if (currentToken.type == MIPSLexer.COLON) {
			Instruction instr;
			try {
				instr = parseInstruction(lexer);
			} catch (Exception e) {
				instr = new NOP(instructionCount);
			}
			instr.setLabel(temp);
			return instr;

		}
		/*
		Instruction instr = parseLabelledInstruction( lexer );
		if( instr != null )
		{
			return instr;
		}
		*/
		throw new ParseException("Unknown mnemonic:" + temp, tempLine);
	}
d181 1
a181 1
		if (currentToken.type == MIPSLexer.COLON) {
d194 8
a201 8
//	public static void main(String[] args) {
//		MIPSParser parser = new MIPSParser();
//		try {
//			parser.parseProgram("LW $t1, a65520($zero)\n");
//		} catch (Exception e) {
//			System.out.println(e);
//		}
//	}
@


1.5
log
@*** empty log message ***
@
text
@d15 1
d23 5
a27 1
			return;
a28 1
		throw new ParseException(currentToken, expected, lexer.getLineNumber());
d31 40
a70 1
	public Instruction[] parseProgram(String sourceProgram)
d95 5
d190 8
a197 9
	public static void main(String[] args) {
		MIPSParser parser = new MIPSParser();
		try {
			parser.parseProgram("LW $t1, a65520($zero)\n");
		} catch (Exception e) {
			System.out.println(e);
		}
	}

@


1.4
log
@*** empty log message ***
@
text
@d6 1
a6 1
import java.util.*;
d9 1
a9 1
 * parses the users file. Invokes the <code>MIPSLexer</code> automatically.
d20 1
a20 1
		if (currentToken.type == expected) {
d33 2
a34 2
		while (currentToken.type != MIPSLexer.EOF) {
			if (currentToken.type == MIPSLexer.NEWLINE) {
d52 1
a52 1
		if (currentToken.value.equals("ADDI")) {
d127 1
a127 1
		String temp = currentToken.value;
@


1.3
log
@*** empty log message ***
@
text
@d9 2
@


1.2
log
@*** empty log message ***
@
text
@d124 1
a124 1
		throws ParseException, MIPSLexerException {
@


1.1
log
@Added Parser
@
text
@d17 1
a17 1
		throws ParseException, MIPSLexerException {
d22 1
a22 4
		throw new MIPSParseException(
			currentToken,
			expected,
			lexer.getLineNumber());
d26 1
a26 1
		throws MIPSLexerException, ParseException {
d49 1
a49 1
		throws MIPSParseException, MIPSLexerException {
@

