head	1.16;
access;
symbols
	yams-final-19-12-03:1.16
	yams-release2-17-12-03:1.15
	yams-release-17-12-03:1.15;
locks; strict;
comment	@# @;


1.16
date	2003.12.19.12.03.52;	author bmc01;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.16.16.16.42;	author bmc01;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.12.18.00.31;	author ss401;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.11.17.37.00;	author ss401;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.10.17.15.10;	author jkm01;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.04.17.57.28;	author bmc01;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.04.16.37.15;	author ajb101;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.04.11.49.51;	author sw00;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.02.15.58.30;	author bmc01;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.28.17.56.34;	author bmc01;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.28.03.30.30;	author sw00;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.14.15.47.44;	author sw00;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.14.15.45.50;	author sw00;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.14.15.28.20;	author ajb101;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.14.15.03.49;	author ajb101;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.14.14.35.42;	author bmc01;	state Exp;
branches;
next	;


desc
@@


1.16
log
@*** empty log message ***
@
text
@/*
 * Created on 04-Nov-2003
 *
 */

package yams.processor;
import yams.*;
import java.util.TreeMap;

/**
 * 
 * @@author bmc01
 *The Register Manager simulates the 32 registers available to the MIPS processor.  These are stored in treemaps for 
 *performance.
 * 
 * 
 */
public class RegisterManager implements RegisterManagerInterface {

	private TreeMap regMap = new TreeMap();
	private StatisticsManagerInterface statisticsManager;
	private Integer zero_value = new Integer(0);

	private YAMSController controller;
	
	private int registerTotal = 32;

/**
 * The constructor requires 2 parameters
 * @@param s Address of the statistics manager so updates can be sent
 * @@param c Address of the YAMS controller to interface with the GUI/Console
 */
	public RegisterManager(StatisticsManagerInterface s, YAMSController c) {
		this.controller = c;
		this.statisticsManager = s;

		//initialise the registers in the treemap
		String regname;
		for (int i = 0; i < 32; i++) {
			regname = "$" + i;
			regMap.put(regname, zero_value);
		}
		regMap.put("PC", zero_value);
		regMap.put("LO", zero_value);
		regMap.put("HI", zero_value);
	}

	public boolean setReg(String regid, int val) {
		Integer value_object = new Integer(val);
		if (regMap.containsKey(regid)) {
			// writes to register $0 are discarded
			if (regid.compareTo("$0") == 0) {
				return true;
			}
			regMap.remove(regid);
			regMap.put(regid, value_object);
			//update stats manager
			statisticsManager.regUsed(regid);
			if (regid.compareTo("PC") != 0) {
				//System.out.println("Wrote " + val + " (" + Integer.toHexString(val) + "h)  to register " + regid);
			}
			// tell the controller something has changed
			controller.regChanged(regid);
			return true;
		} else {
			return false; 
		}
	}

	public boolean setReg(int regid, int val) {
		return setReg("$" + regid, val);
	}

	public int getReg(String regid)
	{
		if (regMap.containsKey(regid)) {
			statisticsManager.regUsed(regid);
			int val = ((Integer) regMap.get(regid)).intValue();
			if (regid.compareTo("PC") != 0) {
				//System.out.println("Read " + val + " (" + Integer.toHexString(val) + "h)  from register " + regid);
			}
			return val;
		} else {
			return -1; 
		}
	}

	public int getReg(int regid) {
		return getReg("$" + regid);
	}

	public int getRegOnly(String regid) 
	{
		if (regMap.containsKey(regid)) {
			return ((Integer) regMap.get(regid)).intValue();
		} else {
			return -1; 
		}
	}

	public int getRegOnly(int regid) {
		return getRegOnly("$" + regid);
	}

	public void reset() {
		regMap = new TreeMap();
		String regname;
		for (int i = 0; i < 32; i++) {
			regname = "$" + i;
			regMap.put(regname, zero_value);
		}
		regMap.put("PC", zero_value);
		regMap.put("LO", zero_value);
		regMap.put("HI", zero_value);
	}

	public String getRegName(int id) throws Exception {
		switch (id) {
			case 0 :	return "$zero";
			case 1 :	return "$at";
			case 2 :	return "$v0";
			case 3 :	return "$v1";
			case 4 :	return "$a0";
			case 5 :	return "$a1";
			case 6 :	return "$a2";
			case 7 :	return "$a3";
			case 8 :	return "$t0";
			case 9 :	return "$t1";
			case 10 :	return "$t2";
			case 11 :	return "$t3";
			case 12 :	return "$t4";
			case 13 :	return "$t5";
			case 14 :	return "$t6";
			case 15 :	return "$t7";
			case 16 :	return "$s0";
			case 17 :	return "$s1";
			case 18 :	return "$s2";
			case 19 :	return "$s3";
			case 20 :	return "$s4";
			case 21 :	return "$s5";
			case 22 :	return "$s6";
			case 23 :	return "$s7";
			case 24 :	return "$t8";
			case 25 :	return "$t9";
			case 26 :	return "$k0";
			case 27 :	return "$k1";
			case 28 :	return "$gp";
			case 29 :	return "$sp";
			case 30 :	return "$fp";
			case 31 :	return "$ra";
			default :	throw new Exception("Invalid register id. Must be 0-31.");
		}
	}
	public int getTotalNumberOfRegisters(){
		return registerTotal;
	}
}
@


1.15
log
@*** empty log message ***
@
text
@d10 8
d28 5
@


1.14
log
@*** empty log message ***
@
text
@d53 1
a53 1
			return false; //throw new UnknownRegisterException
d61 1
a61 1
	public int getReg(String regid) //throws UnknownRegisterException
d71 1
a71 1
			return -1; //throw new UnknownRegisterException
d79 1
a79 1
	public int getRegOnly(String regid) //throws UnknownRegisterException
d84 1
a84 1
			return -1; //throw new UnknownRegisterException
@


1.13
log
@*** empty log message ***
@
text
@d17 2
d140 3
@


1.12
log
@*** empty log message ***
@
text
@d5 1
a5 1
 
d10 1
a10 2
public class RegisterManager implements RegisterManagerInterface 
{
d12 3
a14 3
private TreeMap regMap = new TreeMap();
private StatisticsManagerInterface statisticsManager;
private Integer zero_value = new Integer(0);
d16 1
a16 1
private YAMSController controller;
d18 1
a18 2
	public RegisterManager(StatisticsManagerInterface s, YAMSController c)
	{
d21 1
a21 1
		
d24 1
a24 1
		for (int i=0; i<32; i++) {
d26 1
a26 1
			regMap.put(regname,zero_value);
d32 2
a33 4
	
	
	public boolean setReg(String regid, int val)
	{
d35 1
a35 2
		if (regMap.containsKey(regid))
		{
d37 1
a37 1
			if(regid.compareTo("$0") == 0) {
d44 1
a44 1
			if(regid.compareTo("PC") != 0) {
d50 1
a50 3
		}
		else
		{
d54 2
a55 3
	
	public boolean setReg(int regid, int val)
	{
a57 1
	
a58 2
	
	
d61 1
a61 2
		if (regMap.containsKey(regid))
		{
d63 2
a64 2
			int val = ( (Integer) regMap.get(regid)).intValue();
			if(regid.compareTo("PC") != 0) {
d68 1
a68 3
		}
		else
		{
d72 2
a73 3
	
	public int getReg(int regid)
	{
d75 1
a75 1
	}		
a76 4


	
	
d79 3
a81 6
		if (regMap.containsKey(regid))
		{
			return ( (Integer) regMap.get(regid)).intValue();
		}
		else
		{
d85 2
a86 3
	
	public int getRegOnly(int regid)
	{
d88 3
a90 7
	}	
	
	
	
	
	public void reset()
	{
d93 4
a96 5
		for (int i=0; i<32; i++)
		 {
		 regname = "$" + i;
		 regMap.put(regname, zero_value);
		 }
d102 37
a138 1
	
@


1.11
log
@*** empty log message ***
@
text
@d50 1
a50 1
				System.out.println("Wrote " + val + " (" + Integer.toHexString(val) + "h)  to register " + regid);
d77 1
a77 1
				System.out.println("Read " + val + " (" + Integer.toHexString(val) + "h)  from register " + regid);
@


1.10
log
@*** empty log message ***
@
text
@d15 1
a25 1
		Integer value_object = new Integer(0);
d28 1
a28 1
			regMap.put(regname, value_object);
d30 3
a32 3
		regMap.put("PC", value_object);
		regMap.put("LO", value_object);
		regMap.put("HI", value_object);
a119 1
	    Integer value_object = new Integer(0);
d123 1
a123 1
		 regMap.put(regname, value_object);
d125 3
a127 3
		regMap.put("PC", value_object);
		regMap.put("LO", value_object);
		regMap.put("HI", value_object);
@


1.9
log
@added print statements
@
text
@d7 1
d16 3
a18 1
	public RegisterManager(StatisticsManagerInterface s)
d20 9
a28 9
	//set the statistics manager
	this.statisticsManager = s;
	//initialise the registers in the treemap
	String regname;
	Integer value_object = new Integer(0);
	for (int i=0; i<32; i++)
		{
		regname = "$" + i;
		regMap.put(regname, value_object);
d30 3
a32 3
	regMap.put("PC", value_object);
	regMap.put("LO", value_object);
	regMap.put("HI", value_object);
d52 2
@


1.8
log
@*** empty log message ***
@
text
@d46 3
d70 5
a74 1
			return ( (Integer) regMap.get(regid)).intValue();
@


1.7
log
@*** empty log message ***
@
text
@d100 18
@


1.6
log
@now discards writes to register $0
@
text
@d13 1
d15 1
a15 1
	public RegisterManager()
d17 2
d44 2
d66 1
d79 21
@


1.5
log
@added initialisation for regs PC, LO and HI
@
text
@d35 4
@


1.4
log
@added bodies of getReg(int) and setReg(int, int)
@
text
@d24 3
@


1.3
log
@*** empty log message ***
@
text
@d44 1
a44 1
		return true;
d64 1
a64 1
		return 0;
@


1.2
log
@*** empty log message ***
@
text
@d41 6
d60 5
@


1.1
log
@*** empty log message ***
@
text
@d6 1
a6 1
package processor;
@

