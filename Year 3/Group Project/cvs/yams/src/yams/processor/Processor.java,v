head	1.23;
access;
symbols
	yams-final-19-12-03:1.23
	yams-release2-17-12-03:1.22
	yams-release-17-12-03:1.22;
locks; strict;
comment	@# @;


1.23
date	2003.12.19.07.16.38;	author sw00;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.15.21.37.05;	author sw00;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.10.13.49.47;	author sw00;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.10.08.27.11;	author sw00;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.09.21.00.22;	author ajb101;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.08.01.15.17;	author ajb101;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.04.18.51.47;	author sw00;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.04.16.08.27;	author sw00;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.03.15.00.12;	author sw00;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.03.14.25.07;	author sw00;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.03.13.34.26;	author sw00;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.02.14.41.13;	author sw00;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.29.20.13.02;	author ajb101;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.28.17.56.34;	author bmc01;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.26.13.10.33;	author sw00;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.26.13.06.12;	author sw00;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.21.13.19.34;	author sw00;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.16.17.52.31;	author ajb101;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.14.16.57.44;	author ajb101;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.14.15.38.40;	author sw00;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.13.01.52.16;	author sw00;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.10.11.37.12;	author qq01;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.10.10.57.50;	author qq01;	state Exp;
branches;
next	;


desc
@@


1.23
log
@javadoc, tidied up import
@
text
@/*
 * Created on 09-Nov-2003
 *
 */
package yams.processor;
import java.io.InputStream;
import java.io.PrintStream;
import yams.YAMSController;

/**
 * The overall processor class. Creates and initialises processor components such
 * as the memory, registers and instruction decoder. Provides access to the managers
 * also.
 * 
 * @@author sw00
 */
public class Processor {

	public CycleManagerInterface cycleManager;
	public RegisterManagerInterface registerManager;
	public MemoryManagerInterface memoryManager;
	public StatisticsManagerInterface statisticsManager;
	
	private YAMSController controller;
	private InstructionDecoderInterface instructionDecoder;
	private InstructionHandlerInterface instructionHandler;	
	private InstructionHandlerInterface syscallHandler;
	private PrintStream verbose;

	
	/**
	 * Creates a new processor
	 * @@param yamscontroller
	 * @@param in
	 * @@param out
	 * @@param verbose
	 */
	public Processor(YAMSController yamscontroller, InputStream in, PrintStream out, PrintStream verbose) {
		this.controller = yamscontroller;
		this.verbose = verbose;
		memoryManager = new MemoryManager(0x400000, 0x10000000, 0x7fffffff, verbose, yamscontroller);
		statisticsManager = new StatisticsManager(out, this);
		registerManager = new RegisterManager(statisticsManager, yamscontroller);
		
		// handlers, will be autogenerated Java files from templates
		instructionHandler = new InstructionHandler(registerManager,memoryManager, statisticsManager, out, verbose);
		syscallHandler = new SyscallHandler(registerManager,memoryManager, statisticsManager, in, out, verbose);
				
		instructionDecoder = new InstructionDecoder(instructionHandler,	syscallHandler);
		cycleManager = new CycleManager(controller,registerManager,memoryManager,statisticsManager,instructionDecoder, out, verbose);
		syscallHandler.setCycleManager(cycleManager);
		
		verbose.println("Processor ready");
		
		// controller should now call cycleManager.jump(addr) to the start of code
		// and then cycleManager.start() to begin execution
	} 
	
	/**
	 * Reset the processor (the memory, register and statistics managers)
	 */
	public void reset() {
		memoryManager.reset();
		registerManager.reset();
		statisticsManager.reset();
		cycleManager.reset();
	}
	
	/**
	 * Sets the verbose PrintStream
	 * @@param verbose
	 */
	public void setVerbose(PrintStream verbose) {
		this.verbose = verbose;
		memoryManager.setVerbose(verbose);
		instructionHandler.setVerbose(verbose);
		syscallHandler.setVerbose(verbose);
		cycleManager.setVerbose(verbose);
	}
	
}
@


1.22
log
@added setVerbose(PrintStream)
@
text
@d8 1
a8 1
import yams.*;
d30 1
d32 5
a36 2
	 * Creates a new processor.
	 * @@param controller
d69 4
@


1.21
log
@reset() now also resets cycle manager
@
text
@d27 2
a28 1
	private InstructionHandlerInterface syscallHandler;	
d36 1
d63 8
@


1.20
log
@added reset method
@
text
@d60 1
@


1.19
log
@updated data panel
@
text
@d53 9
@


1.18
log
@GUI updates Galore!
@
text
@d35 1
a35 1
		memoryManager = new MemoryManager(0x400000, 0x10000000, 0x7fffffff, verbose);
@


1.17
log
@updated memory manager constructor
@
text
@d51 2
a52 3
		
	}

@


1.16
log
@updated regman constructor
@
text
@d35 1
a35 1
		memoryManager = new MemoryManager(0x400000, 0x10000000, 0x7fffffff);
@


1.15
log
@updated syscall constructor
@
text
@d37 1
a37 1
		registerManager = new RegisterManager(statisticsManager);
@


1.14
log
@updated InstructionHandler constructor
@
text
@d41 1
a41 1
		syscallHandler = new SyscallHandler(registerManager,memoryManager, in, out, verbose);
@


1.13
log
@added verbose printstream
@
text
@d40 1
a40 1
		instructionHandler = new InstructionHandler(registerManager,memoryManager, out, verbose);
@


1.12
log
@updated statsManager constructor
@
text
@d33 1
a33 1
	public Processor(YAMSController yamscontroller, InputStream in, PrintStream out) {
d40 2
a41 2
		instructionHandler = new InstructionHandler(registerManager,memoryManager, out);
		syscallHandler = new SyscallHandler(registerManager,memoryManager, in, out);
d44 1
a44 1
		cycleManager = new CycleManager(controller,registerManager,memoryManager,statisticsManager,instructionDecoder, out);
d47 1
a47 1
		out.println("Processor ready");
@


1.11
log
@changed YAMSConsole to more generic YAMSController in a couple of places
@
text
@d36 1
a36 1
		statisticsManager = new StatisticsManager(out);
@


1.10
log
@*** empty log message ***
@
text
@d8 1
a8 1
import yams.YAMSConsole;
d24 1
a24 1
	private YAMSConsole controller;
d33 1
a33 1
	public Processor(YAMSConsole yamscontroller, InputStream in, PrintStream out) {
@


1.9
log
@added stream to stats manager
@
text
@a35 1
		registerManager = new RegisterManager();
d37 1
@


1.8
log
@added input & output stream support
@
text
@d37 1
a37 1
		statisticsManager = new StatisticsManager();
@


1.7
log
@updated to allow syscall handler access to cycle manager
@
text
@d6 2
d33 1
a33 1
	public Processor(YAMSConsole yamscontroller) {
d40 2
a41 2
		instructionHandler = new InstructionHandler(registerManager,memoryManager);
		syscallHandler = new SyscallHandler(registerManager,memoryManager);
d44 1
a44 1
		cycleManager = new CycleManager(controller,registerManager,memoryManager,statisticsManager,instructionDecoder);
d47 1
a47 1
		System.out.println("Processor ready");
@


1.6
log
@fixed type in MIPSParser, and changing layout of controller classes
@
text
@d39 1
a39 1
		syscallHandler = new SyscallHandler(registerManager,memoryManager,controller);
d43 1
@


1.5
log
@*** empty log message ***
@
text
@d6 1
a6 1
import yams.YAMS;
d22 1
a22 1
	private YAMS controller;
d31 1
a31 1
	public Processor(YAMS yamscontroller) {
@


1.4
log
@*** empty log message ***
@
text
@d33 1
a33 1
		memoryManager = new MemoryManager(10000, 10000, 100000);
d38 2
a39 7
		InstructionHandlerInterface instructionHandler = new InstructionHandler(
																registerManager,
																memoryManager);
		InstructionHandlerInterface syscallHandler = new SyscallHandler(
																registerManager,
																memoryManager,
																controller);
d41 2
a42 7
		InstructionDecoderInterface instructionDecoder = new InstructionDecoder(
											instructionHandler,	syscallHandler);
		CycleManagerInterface cycleManager = new CycleManager(controller,
															registerManager,
															memoryManager,
															statisticsManager,
															instructionDecoder);
@


1.3
log
@added javadoc comments
@
text
@d34 2
a35 6
		registerManager = null;
		// TODO - invoke register manager's constructor when available
		//registerManager = new RegisterManager();
		statisticsManager = null;
		// TODO - invoke statistics manager's constructor when available
		//statisticsManager = new StatisticsManager();
@


1.2
log
@*** empty log message ***
@
text
@d9 4
a13 1
 *
d27 4
d35 1
d38 1
@


1.1
log
@Updated package structure.
@
text
@d6 1
a6 1
import YAMS;
@

