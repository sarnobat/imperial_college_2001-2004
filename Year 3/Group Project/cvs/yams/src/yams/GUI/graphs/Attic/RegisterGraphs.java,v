head	1.18;
access;
symbols;
locks; strict;
comment	@# @;


1.18
date	2003.12.16.15.59.15;	author ss401;	state dead;
branches;
next	1.17;

1.17
date	2003.12.16.13.53.48;	author ss401;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.16.02.07.03;	author ajb101;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.15.19.19.10;	author ss401;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.15.15.25.37;	author ss401;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.15.15.20.39;	author ss401;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.15.15.12.49;	author ss401;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.14.19.10.39;	author ss401;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.13.18.36.21;	author ss401;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.13.18.05.08;	author ss401;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.13.18.04.39;	author ss401;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.13.16.08.58;	author ss401;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.13.15.39.20;	author ss401;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.12.18.44.16;	author ss401;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.11.20.55.31;	author ss401;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.11.20.04.19;	author ss401;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.10.21.09.36;	author ss401;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.10.20.47.01;	author ss401;	state Exp;
branches;
next	;


desc
@@


1.18
log
@*** empty log message ***
@
text
@package yams.GUI.graphs;
import java.awt.Dimension;

import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.text.html.HTMLEditorKit;

import yams.GUI.StatisticsFrame;
import yams.processor.Processor;
/*
 * Created on 10-Dec-2003
 *
 */
/**
 * @@author ss401
 * Panel containing vertical bar charts of register
 * access frequency 
 */
public class RegisterGraphs extends JPanel {

	/*
	 * Size configuration data. Most of this should be determined
	 * from the window height
	 */
	private int imgWidth;
	private int windowHeight;
	private long totalMaxCounts;
	private int fontSize;
	private int cellHeight;

	/*
	 * Rendering data
	 */
	private String tableColumnBreak = "<td width=" + imgWidth + ">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>";
	private String content;
	private JEditorPane textPane;

	private Processor p;
	private int totalRegisters;
	private int[] regOrder;
	/*
	 * Colors
	 */
	private static final String RED = "D03100";
	private static final String GREEN = "88BE00";
	private static final String BLUE = "0082FC";
	private static final String ORANGE = "FE6600";
	private static final String PURPLE = "B98CFC";
	private static final String YELLOW = "E9D042";

	public RegisterGraphs(StatisticsFrame sf, Processor p) {
		try {
			//set fields from parameters so whole class can access them
			this.windowHeight = sf.WINDOW_HEIGHT;
			this.imgWidth = (sf.WINDOW_WIDTH + sf.WIDTH_BUFFER) / 13;
			this.cellHeight = sf.WINDOW_HEIGHT / 3;
			this.p = p;
			
			this.setSize(new Dimension(sf.WINDOW_WIDTH, windowHeight));
			this.totalRegisters = p.registerManager.getTotalNumberOfRegisters();
			//create display
			this.textPane = new JEditorPane("text/html", "");
			this.textPane.setEditable(false);
			this.textPane.setEditorKit(new HTMLEditorKit());
			this.regOrder = initializeRegOrder();
			try {
				render();
			}
			catch (Exception e) {
				e.printStackTrace();
				System.exit(-1);
			}
			this.textPane.setText(sf.preAmble + content);
			this.add(textPane);

			System.out.println(textPane.getText());
			
		}
		catch (Exception e1) {
			System.out.println("Inconsistent data");
			e1.printStackTrace();
		}
	}

	/**
	 * Generates the html code for the vertical bar
	 * graphs to reflect the statistics
	 * @@throws Exception
	 */
	private void render() throws Exception {
		long[] maxCounts = getMaxCounts();
		totalMaxCounts = maxCounts[0] + maxCounts[1] + maxCounts[2];
		long[] counts = new long[totalRegisters];
		int[] heights = new int[totalRegisters];
		content = "<table><tr>";
		int j = 0;
		int rowNo = 0;
		int rowHeight;
		if (totalMaxCounts > 0) {
			rowHeight = (int) ((double) (maxCounts[rowNo] / totalMaxCounts) * windowHeight);
		}
		else {
			rowHeight = windowHeight / 3;
		}

		//Go through each register, fetch it's access count and display
		//it with a vertical image bar
		for (int i = 0; i < regOrder.length; i++) {
			if (regOrder[i] == -1) {
				//insert a blank cell
				content += tableColumnBreak;
				continue;
			}
			else if (regOrder[i] == -2) {
				//Start a new row
				content += "</tr><tr>";
				rowNo++;
				double proportion = ((double) maxCounts[rowNo]) / ((double) totalMaxCounts);
				if (totalMaxCounts > 0) {
					rowHeight = (int) (proportion * windowHeight);
				}
				continue;
			}
			else {
				//create a vertical block with size proportional to the register access count
				int currentRegId = regOrder[i];
				long count = p.statisticsManager.getRegCount(currentRegId);
				counts[j] = count;
				int height;
				if (totalMaxCounts > 0) {
					height = (int) (windowHeight * count / totalMaxCounts);
				}
				else {
					height = windowHeight / 3;
				}
				heights[j] = height;
				content += "<td valign=bottom><table><tr><td align=center valign=bottom>";
				String countStr = "(" + String.valueOf(count) + ")";
				if (count > 0) {
					countStr = "<b>(" + count + ")</b>";
				}
				if (height > 0 && count > 0) {
					//display a small bar for images that are of height less that 1

					String imageTag =
						"<table height=100% width=95%><tr><td>&nbsp;</td></tr><tr>"
							+ "<td>"
							+ "<div style=\"font-size:1px;\""
							+ " height="
							+ height
							+ " bgcolor="
							+ getColor(currentRegId)
							+ ">&nbsp;"
							+ "</div></td></tr></table>";
					content += imageTag;
				}
				else if (count > 0 && height == 0) {
					// Don't print anything
				}
				j++;
				content += "</td></tr><tr><td align=center valign=top>---------<br>"
					+ p.registerManager.getRegName(currentRegId)
					+ "<br>"
					+ countStr
					+ "<br></td></tr></table></td>";
			}
		}
		content += "</tr></table>";
	}

	/**
	 * Returns the maximum register access counts for registers in 
	 * each of the 3 rows to be displayed
	 * @@return
	 * @@throws Exception
	 */
	private long[] getMaxCounts() throws Exception {
		long[] maxCounts = new long[3];
		int currentRow = 0;
		int currentRowMax = 0;
		int i;
		//sanity check
		if (filterRegIds(regOrder).length != totalRegisters) {
			System.out.println("Too many registers in display configuration. There should only be 32 registers in the display.");
			throw new Exception();
		}
		for (i = 0; i < regOrder.length; i++) {
			if (regOrder[i] == -1) {
				continue;
			}
			else if (regOrder[i] == -2) {
				maxCounts[currentRow] = currentRowMax;
				currentRow++;
				currentRowMax = 0;
			}
			else {
				int registerAccessCount = p.statisticsManager.getRegCount(regOrder[i]);
				if (registerAccessCount > currentRowMax) {
					currentRowMax = registerAccessCount;
				}
			}
		}
		maxCounts[currentRow] = currentRowMax;
		return maxCounts;
	}
	/**
	 * removes non-data values (i.e. negative values) from register id array
	 * @@param regIds
	 * @@return
	 */
	private int[] filterRegIds(int[] regIds) {
		int[] filtered = new int[totalRegisters];
		int j = 0;
		for (int i = 0; i < regIds.length; i++) {
			if (regIds[i] > -1) {
				filtered[j] = regIds[i];
				j++;
			}
		}
		return filtered;
	}

	/**
	 * Returns a string URL of the image which
	 * should be used for a particular register
	 * @@param i
	 * @@return
	 */
	private String getColor(int i) {
		String filename = null;
		//$t
		if ((7 < i && i < 16) || i == 24 || i == 25) {
			filename = BLUE;
		}
		//$s
		else if ((15 < i && i < 24)) {
			filename = PURPLE;
		}
		//$a
		else if (3 < i && i < 8) {
			filename = ORANGE;
		}
		//$v
		else if (i == 2 || i == 3) {
			filename = GREEN;
		}
		//$k
		else if (i == 26 || i == 27) {
			filename = YELLOW;
		}
		//other registers
		else {
			filename = RED;
		}
		return filename;
	}

	/**
	 * Returns an array of ints, each representing a register.
	 * The array specifies what order to display the registers in the
	 * graph.
	 * 	'-1' means leave a blank space between two bars,
	 * 	'-2' means insert the remaining registers on a new line 
	 * @@return
	 * @@throws Exception
	 */
	private int[] initializeRegOrder() throws Exception {
		int[] regOrder =
			{
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				-1,
				2,
				3,
				-1,
				0,
				-2,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				-1,
				4,
				5,
				6,
				7,
				-2,
				26,
				27,
				-1,
				1,
				-1,
				28,
				-1,
				29,
				-1,
				30,
				-1,
				31 };
		return regOrder;
	}

}
@


1.17
log
@*** empty log message ***
@
text
@@


1.16
log
@*** empty log message ***
@
text
@d41 9
d58 3
a60 1
			totalRegisters = p.registerManager.getTotalNumberOfRegisters();
d62 4
a65 3
			textPane = new JEditorPane("text/html", "");
			textPane.setEditorKit(new HTMLEditorKit());
			regOrder = initializeRegOrder();
d73 1
a73 1
			textPane.setText(sf.preAmble + content);
d75 3
a77 1
			this.setSize(new Dimension(sf.WINDOW_WIDTH, windowHeight));
d86 86
d233 1
a233 1
			filename = "blue";
d237 1
a237 1
			filename = "orange";
d241 1
a241 1
			filename = "red";
d245 1
a245 1
			filename = "green";
d249 1
a249 1
			filename = "yellow";
d253 1
a253 1
			filename = "purple";
a312 81
	/**
	 * Generates all html code necessary to display graphs. 
	 * The code is accumulated in the String 'content'	   
	 * @@throws Exception
	 */
	private void render() throws Exception {
		long[] maxCounts = getMaxCounts();
		totalMaxCounts = maxCounts[0] + maxCounts[1] + maxCounts[2];
		long[] counts = new long[totalRegisters];
		int[] heights = new int[totalRegisters];
		content = "<table><tr>";
		int j = 0;
		int rowNo = 0;
		int rowHeight;
		if (totalMaxCounts > 0) {
			rowHeight = (int) ((double) (maxCounts[rowNo] / totalMaxCounts) * windowHeight);
		}
		else {
			rowHeight = windowHeight / 3;
		}

		//Go through each register, fetch it's access count and display
		//it with a vertical image bar
		for (int i = 0; i < regOrder.length; i++) {
			if (regOrder[i] == -1) {
				//insert a blank cell
				content += tableColumnBreak;
				continue;
			}
			else if (regOrder[i] == -2) {
				//Start a new row
				content += "</tr><tr>";
				rowNo++;
				double proportion = ((double) maxCounts[rowNo]) / ((double) totalMaxCounts);
				if (totalMaxCounts > 0) {
					rowHeight = (int) (proportion * windowHeight);
				}
				continue;
			}
			else {
				//create a vertical block with size proportional to the register access count
				int currentRegId = regOrder[i];
				long count = p.statisticsManager.getRegCount(currentRegId);
				counts[j] = count;
				int height;
				if (totalMaxCounts > 0) {
					height = (int) (windowHeight * count / totalMaxCounts);
				}
				else {
					height = windowHeight / 3;
				}
				heights[j] = height;
				content += "<td height=" + rowHeight + " valign=bottom><table><tr><td align=center valign=bottom>";
				String countStr = "(" + String.valueOf(count) + ")";
				if (count > 0) {
					countStr = "<b>(" + count + ")</b>";
				}
				if (height > 0 && count > 0) {
					//display a small bar for images that are of height less that 1
					
					String imageTag =
						"<table hieght=100% width=95%><tr><td>&nbsp;</td></tr><tr><td bgcolor="
							+ getColor(regOrder[i])
							+ " height="
							+ height
							+ ">&nbsp;</td></tr></table>";
					content += imageTag;
				}
				else if (count > 0 && height == 0) {
					// Don't print anything
				}
				j++;
				content += "</td></tr><tr><td align=center valign=top>---------<br>"
					+ p.registerManager.getRegName(regOrder[i])
					+ "<br>"
					+ countStr
					+ "<br></td></tr></table></td>";
			}
		}
		content += "</tr></table>";
	}
@


1.15
log
@*** empty log message ***
@
text
@a2 1
import java.io.File;
@


1.14
log
@*** empty log message ***
@
text
@a62 1
			System.out.println(textPane.getText());
d150 1
a150 1
			filename = "grey";
@


1.13
log
@*** empty log message ***
@
text
@d131 1
a131 1
	private String getImage(int i) {
d157 1
a157 2
		//File f = new File("src\\yams\\GUI\\graphs\\" + filename);
		return filename; //"file:///" + f.getAbsolutePath();
d274 1
a274 1
					//String imageTag = "<img src=" + getImage(regOrder[i]) + " height=" + (windowHeight * count / totalMaxCounts) + " width=" + imgWidth + ">";
d277 1
a277 1
							+ getImage(regOrder[i])
d284 1
a284 1
					//content += "<img src=" + getImage(regOrder[i]) + " height=" + 1 + " width=" + imgWidth + ">";
@


1.12
log
@*** empty log message ***
@
text
@d21 1
a21 1
	
d31 1
a31 1
	
d38 1
a38 1
	
d42 1
a42 1
	
d72 1
a72 1
	
d124 1
a124 1
	
d135 1
a135 1
			filename = "blue.jpg";
d139 1
a139 1
			filename = "orange.jpg";
d143 1
a143 1
			filename = "red.jpg";
d147 1
a147 1
			filename = "green.jpg";
d151 1
a151 1
			filename = "grey.jpg";
d155 1
a155 1
			filename = "purple.jpg";
d157 2
a158 2
		File f = new File("src\\yams\\GUI\\graphs\\" + filename);
		return "file:///" + f.getAbsolutePath();
d160 1
a160 1
	
d215 1
a215 1
	
d236 1
a236 1
		
d276 6
a281 1
					String imageTag = "<table hieght=100% width=95%><tr><td bgcolor=FFFFFF>&nbsp;</td></tr><tr><td bgcolor=0000FF height=" + height +">&nbsp;</td></tr></table>";
@


1.11
log
@*** empty log message ***
@
text
@d275 2
a276 1
					String imageTag = "<img src=" + getImage(regOrder[i]) + " height=" + (windowHeight * count / totalMaxCounts) + " width=" + imgWidth + ">";
d280 1
a280 1
					content += "<img src=" + getImage(regOrder[i]) + " height=" + 1 + " width=" + imgWidth + ">";
@


1.10
log
@*** empty log message ***
@
text
@d236 3
d256 1
@


1.9
log
@*** empty log message ***
@
text
@d21 1
d31 1
d38 1
d42 1
d72 1
a72 7
	/*private void insertHTML(JEditorPane editor, String html, int location) throws IOException, BadLocationException {
		//assumes editor is already set to "text/html" type
		HTMLEditorKit kit = (HTMLEditorKit) editor.getEditorKit();
		Document doc = editor.getDocument();
		StringReader reader = new StringReader(html);
		kit.read(reader, doc, location);
	}*/
d124 1
d160 1
d215 1
@


1.8
log
@*** empty log message ***
@
text
@a2 1
import java.awt.Image;
d4 1
a4 3
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
a6 3
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLDocument;
d8 1
a8 1
import javax.swing.text.html.ImageView;
@


1.7
log
@*** empty log message ***
@
text
@d3 5
d10 5
a38 1
	private String imageURL = "http://www.doc.ic.ac.uk/~ss401/mips/blue.jpg";
d55 1
d74 7
d133 35
d276 1
a276 1
					String imageTag = "<img src=" + imageURL + " height=" + (windowHeight * count / totalMaxCounts) + " width=" + imgWidth + ">";
d280 1
a280 1
					content += "<img src=" + imageURL + " height=" + 1 + " width=" + imgWidth + ">";
a291 1
	
@


1.6
log
@*** empty log message ***
@
text
@a5 1
import yams.GUI.graphs.dummy.DummyProcessor;
d38 1
d43 2
a44 1
			//this.p = new DummyProcessor();
a45 2
			p.registerManager.getTotalNumberOfRegisters();
			totalRegisters = p.registerManager.getTotalNumberOfRegisters();
d64 6
d115 9
a124 5
		/* the regOrder array indicates the graph display layout
		 * -1 indicates a space between bars;
		 * -2 indicates new line
		 * 0..31 represent a register
		 */
d169 5
a189 1
			//content += "<td valign=bottom><table><tr>";
d207 1
a207 1
				long count = p.statisticsManager.getRegCount(currentRegId);//p.registerManager.getRegOnly(currentRegId);
d209 7
a215 1
				int height = (int) (windowHeight * count / totalMaxCounts);
d218 1
a218 1
				String countStr = "(" +String.valueOf(count)+")";
d220 1
a220 1
					countStr= "<b>(" + count +")</b>";
d222 1
a222 2
				
				if (height > 0 && count >0) {
a225 1
					
d227 1
a227 1
				else if (count > 0 && height ==0){
a229 5
				else if (count == 0) {
					//separate cases needed so image height calculation doesn't invlove a divide by zero 
					
					
				}
d231 5
a235 1
				content += "</td></tr><tr><td align=center valign=top>---------<br>" + p.registerManager.getRegName(regOrder[i]) + "<br>" + countStr + "<br></td></tr></table></td>";
d240 1
a240 11
	private static int max(int[][] arrays) {
		int max = 0;
		for (int i = 0; i < arrays.length; i++) {
			for (int j = 0; j < arrays[i].length; j++) {
				if (arrays[i][j] > max) {
					max = arrays[i][j];
				}
			}
		}
		return max;
	}
@


1.5
log
@*** empty log message ***
@
text
@a2 1

a4 1

d6 1
a7 1

a10 2
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
a11 1

d14 2
a15 3
 *
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
a17 25

	/*
	 * Pseudo Statistical Data
	 */
	int[] regOrder;
	
	/*String[] sRegNames;
	// = { "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7" };
	String[] aRegNames; // = { "$a0", "$a1", "$a2", "$a3" };
	String[] zeroRegNames; // = { "$zero" };
	String[] spRegNames; // = { "$sp" };
	String[] fpRegNames; // = { "$fp" };
	String[] raRegNames; // = { "$ra" };
	String[] tRegNames;
	// = { "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$t8", "$t9" };
	String[] vRegNames; // = { "$v0", "$v1" };
	
	int[] sRegCounts; // = { 3, 6, 4, 2, 1, 0, 1, 2 };
	int[] aRegCounts; // = { 3, 6, 4, 2 };
	int[] zeroRegCounts; // = { 3 };
	int[] spRegCounts; // = { 3 };
	int[] fpRegCounts; // = { 3 };
	int[] raRegCounts; // = { 3 };
	int[] tRegCounts; // = { 3, 6, 4, 2, 1, 0, 1, 2, 2, 2 };
	int[] vRegCounts; // = { 3, 6 };*/
d19 2
a20 1
	 * Numerical setup Data
d22 1
a22 1
	private int imgWidth; // = 30;
d24 1
a24 1
	private int totalMaxCounts;
d26 1
a32 1

a33 1

d36 1
a36 1

a38 1
			textPane = new JEditorPane("text/html", "");
d41 1
a41 1

d43 2
a46 1

d50 2
a51 1
			} catch (Exception e) {
d59 2
a60 2

		} catch (Exception e1) {
d65 2
a66 4

	private int[] getMaxCounts() throws Exception {

		int[] maxCounts = new int[3];
d78 2
a79 1
			} else if (regOrder[i] == -2) {
d83 3
a85 2
			} else {
				int registerAccessCount = p.registerManager.getRegOnly(regOrder[i]);
a109 8
	/*private List toList(int[] arr){
		Vector v = new Vector();
		for (int i = 0; i < arr.length; i++) {
			v.add
		}
		return l;
	}*/

a110 1

a159 1

d161 4
a164 60
		/*
		 * Find the maximum heights of the bars
		 */
		/*int[][] row1Counts = { sRegCounts, aRegCounts };
		int[][] row2Counts = { zeroRegCounts, spRegCounts, fpRegCounts, raRegCounts };
		int[][] row3Counts = { tRegCounts, vRegCounts };
		int maxHeight1 = max(row1Counts);
		int maxHeight2 = max(row2Counts);
		int maxHeight3 = max(row3Counts);
		totalMaxCounts = maxHeight1 + maxHeight2 + maxHeight3;
		
		String htmlSRegs = getHTMLCode(sRegCounts, sRegNames, imageURL, maxHeight1);
		String htmlARegs = getHTMLCode(aRegCounts, aRegNames, imageURL, maxHeight1);
		
		String htmlZeroReg = getHTMLCode(zeroRegCounts, zeroRegNames, imageURL, maxHeight2);
		String htmlSpReg = getHTMLCode(spRegCounts, spRegNames, imageURL, maxHeight2);
		String htmlFpReg = getHTMLCode(fpRegCounts, fpRegNames, imageURL, maxHeight2);
		String htmlRaReg = getHTMLCode(raRegCounts, raRegNames, imageURL, maxHeight2);
		
		String htmlTRegs = getHTMLCode(tRegCounts, tRegNames, imageURL, maxHeight3);
		String htmlVRegs = getHTMLCode(vRegCounts, vRegNames, imageURL, maxHeight3);
		
		content =
			"<table><tr><td valign=bottom>"
				+ htmlSRegs
				+ "</td>"
				+ tableColumnBreak
				+ "<td valign=bottom>"
				+ htmlARegs
				+ "</td></tr></table>"
				+ "<table><tr><td valign=bottom>"
				+ htmlZeroReg
				+ "</td>"
				+ tableColumnBreak
				+ tableColumnBreak
				+ tableColumnBreak
				+ "<td valign=bottom>"
				+ htmlSpReg
				+ "</td>"
				+ tableColumnBreak
				+ tableColumnBreak
				+ tableColumnBreak
				+ "<td valign=bottom>"
				+ htmlFpReg
				+ "</td>"
				+ tableColumnBreak
				+ tableColumnBreak
				+ tableColumnBreak
				+ "<td valign=bottom>"
				+ htmlRaReg
				+ "</td></tr></table>"
				+ "<table><tr><td valign=bottom>"
				+ htmlTRegs
				+ "</td>"
				+ tableColumnBreak
				+ htmlVRegs
				+ "</td></tr></table>";*/
		int[] maxCounts = getMaxCounts();
		int totalMaxCounts = maxCounts[0] + maxCounts[1] + maxCounts[2];
		//content += "<table><tr><table>";
a165 1

d167 8
a175 1
			int count = p.registerManager.getReg(regOrder[i]);
a176 1

d178 1
a178 1
				//content += "</table>" + tableColumnBreak + "</table>";
d181 3
a183 2
			} else if (regOrder[i] == -2) {
				//content += "</tr></table><br><table>";
d185 5
d191 27
a217 22
			} else if (count > 0) {
				content += "<td><img src="
					+ imageURL
					+ " height="
					+ (windowHeight * p.registerManager.getReg(i) / totalMaxCounts)
					+ " width="
					+ imgWidth
					+ "><br>"
					+ p.registerManager.getRegName(j)
					+ "</td>";
				j++;
			} else if (count == 0) {
				//separate cases needed so image height calculation doesn't invlove a divide by zero 
				content += "<td><img src="
					+ imageURL
					+ " height="
					+ 0
					+ " width="
					+ imgWidth
					+ "><br>"
					+ p.registerManager.getRegName(j)
					+ "</td>";
d219 1
a220 2
			//content += "<tr>" +p.registerManager.getRegName(regOrder[i])+ "</tr></tr></table></td>";

a222 24
	}
	private String getHTMLCode(int lower, int upper, String imageURL, int maxVal) throws Exception {
		String content = "";
		String content2 = "";
		String content3 = "";

		/*content += "<table>" + "<tr>";
		for (int i = lower; i <= upper; i++) {
		
			content += "<td valign=bottom>"
				+ "<img src="
				+ imageURL
				+ " height="
				+ (windowHeight * p.registerManager.getReg(i) / totalMaxCounts)
				+ " width="
				+ imgWidth
				+ "></td>";
			content2 += "<td valign=top>" + p.registerManager.get + "</td>";
			content3 += "<td valign=top>" + "(" + regAccesses[i] + ")</td>";
			//}
			content += "</tr>" + "<tr>" + content2 + "</tr>" + "<tr>" + content3 + "</tr></table>";
		}*/

		return content;
@


1.4
log
@*** empty log message ***
@
text
@a8 1
import yams.processor.RegisterManagerInterface;
d29 1
a29 1
	int numberOfRegisters = 32;
d66 1
d70 1
a70 1
			textPane = new JEditorPane("textPane/html", "");
d75 2
d80 1
a80 1
				//render();
d86 1
a86 1
			System.out.println(content);
d103 1
a103 1
		if (filterRegIds(regOrder).length != numberOfRegisters) {
d130 1
a130 1
		int[] filtered = new int[numberOfRegisters];
d260 4
a263 1
		content += "<table><tr><table>";
d266 10
a275 5
			content += "<td valign=bottom>";
			if (count == -1) {
				content += "</table>" + tableColumnBreak + "</table>";
			} else if (count == -2) {
				content += "</tr></table><br><table>";
d277 1
a277 1
				content += "<img src="
d283 16
a298 1
					+ ">";
d300 2
a301 1
			content += "</td>";
d303 1
a303 1
		content += "</table>";
@


1.3
log
@*** empty log message ***
@
text
@d64 1
a64 1
	private JEditorPane text;
a66 1
	private RegisterManagerInterface r;
a67 5
	/**
	 *
	 * @@param sf
	 * @@param p
	 */
d70 1
a70 1
			text = new JEditorPane("text/html", "");
a74 1
			this.r = p.registerManager;
d76 1
d78 1
a78 1
				render();
d80 1
a80 1
				System.out.println("Array arguments supplied of incorrect length.");
d83 3
a85 2
			text.setText(sf.preAmble + content);
			this.add(text);
a87 1
			regOrder = initializeRegOrder();
d94 1
a94 1
	private int[] getMaxCounts(int[] regIds) throws Exception {
d100 3
a102 1
		if (filterRegIds(regIds).length != numberOfRegisters) {
d105 2
a106 2
		for (i = 0; i < regIds.length; i++) {
			if (regIds[i] == -1) {
d108 1
a108 1
			} else if (regIds[i] == -2) {
d113 3
a115 2
				if (r.getReg(regIds[i]) > currentRowMax) {
					currentRowMax = r.getReg(regIds[i]);
d256 1
a256 1
		int[] maxCounts = getMaxCounts(regOrder);
d260 2
a261 1
			int count = r.getReg(regOrder[i]);
d263 1
a263 1
				content += "</table>"+tableColumnBreak+"</table>";
d267 1
a267 1
				content += "<td valign=bottom><img src="
d273 1
a273 1
					+ "></td>";
d275 1
@


1.2
log
@added package declarations
@
text
@d2 2
d5 5
d24 1
a24 1
public class RegisterGraphs extends JEditorPane {
d29 21
a49 17
	String[] sRegNames = { "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6", "$s7" };
	String[] aRegNames = { "$a0", "$a1", "$a2", "$a3" };
	String[] zeroRegNames = { "$zero" };
	String[] spRegNames = { "$sp" };
	String[] fpRegNames = { "$fp" };
	String[] raRegNames = { "$ra" };
	String[] tRegNames = { "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6", "$t7", "$t8", "$t9" };
	String[] vRegNames = { "$v0", "$v1" };

	int[] sRegCounts = { 3, 6, 4, 2, 1, 0, 1, 2 };
	int[] aRegCounts = { 3, 6, 4, 2 };
	int[] zeroRegCounts = { 3 };
	int[] spRegCounts = { 3 };
	int[] fpRegCounts = { 3 };
	int[] raRegCounts = { 3 };
	int[] tRegCounts = { 3, 6, 4, 2, 1, 0, 1, 2, 2, 2 };
	int[] vRegCounts = { 3, 6 };
d53 2
a54 2
	private int imgWidth;// = 30;
	private  int windowHeight;
d60 1
a60 1
	private String imageURL = "http://web.mit.edu/civenv/K12Edu/images/bluedot.jpg";
a62 1
	
d64 11
a74 5
	public RegisterGraphs() {
		super("text/html", "");
		this.windowHeight = StatisticsVisualizer.WINDOW_HEIGHT;
		this.imgWidth = (StatisticsVisualizer.WINDOW_WIDTH+ StatisticsVisualizer.WIDTH_BUFFER)/13;
		//this.fontSize = StatisticsVisualizer.fontSize;
d76 32
a107 4
			render();
		} catch (Exception e) {
			System.out.println("Array arguments supplied of incorrect length.");
			System.exit(-1);
d109 90
a198 1
		this.setText(StatisticsVisualizer.preAmble + content);
d205 1
a205 1
		int[][] row1Counts = { sRegCounts, aRegCounts };
d211 2
a212 2
		totalMaxCounts = maxHeight1 +maxHeight2+maxHeight3;

d215 1
a215 1

d220 1
a220 1

d223 1
a223 1

d225 1
a225 2
			
				"<table><tr><td valign=bottom>"
d258 12
a269 20
				+ "</td></tr></table>";
		
	}
	public String getHTMLCode(int[] regAccesses, String[] regNames, String imageURL,int maxVal) throws Exception {
		String content = "";
		String content2 = "";
		String content3 = "";

		if (regAccesses.length != regNames.length) {
			throw new Exception("Array lengths are not equal");
		}

		if (regAccesses == null) {
			content = "<b>Nothing to Display</b>";
		} else {
			content += "<table>" + "<tr>";
			for (int i = 0; i < regAccesses.length; i++) {

				content += "<td valign=bottom>"
					+ "<img src="
d272 1
a272 1
					+ (windowHeight* regAccesses[i]/totalMaxCounts)
a275 2
				content2 += "<td valign=top>"+ regNames[i] + "</td>";
				content3 += "<td valign=top>"+ "(" + regAccesses[i] + ")</td>";
d277 22
d300 1
a300 1
		}
@


1.1
log
@Added graphs package with 3 java files
@
text
@d1 1
@

