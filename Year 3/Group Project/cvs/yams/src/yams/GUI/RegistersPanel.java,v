head	1.15;
access;
symbols
	yams-final-19-12-03:1.15
	yams-release2-17-12-03:1.15
	yams-release-17-12-03:1.15;
locks; strict;
comment	@# @;


1.15
date	2003.12.16.02.07.03;	author ajb101;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.15.15.43.51;	author ajb101;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.14.19.10.35;	author ss401;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.11.03.17.02;	author ajb101;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.10.15.14.07;	author ajb101;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.10.03.02.45;	author ajb101;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.09.21.00.21;	author ajb101;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.09.15.26.52;	author ajb101;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.08.19.44.14;	author ajb101;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.08.01.15.17;	author ajb101;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.04.17.10.45;	author ajb101;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.04.16.37.14;	author ajb101;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.04.02.48.12;	author ajb101;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.03.13.51.14;	author ajb101;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.02.14.47.15;	author ajb101;	state Exp;
branches;
next	;


desc
@@


1.15
log
@*** empty log message ***
@
text
@
package yams.GUI;

import java.awt.*;

import javax.swing.*;
import javax.swing.table.*;

import yams.*;
import yams.processor.*;


public class RegistersPanel extends YamsPanel {


	// window elements
	RegisterTableModel registerTableModel;
	JPanel tablePanel;
	JTable registerTable;
	JScrollPane scrollPane;
	
	
	public RegistersPanel(YAMSGui controller) {
		super(controller);
		setTitle("Register Contents");
		
		// initisation must be done AFTER processor is created
	}
	
	/**
	 * Creates the table which displays the contents of the registers
	 * in the newly created processor
	 */
	public void init() {
		this.setLayout(new GridLayout());

		tablePanel = new JPanel();
		tablePanel.setLayout(new BoxLayout(tablePanel, BoxLayout.LINE_AXIS));
		
		registerTableModel = new RegisterTableModel(controller);
		registerTable = new JTable(registerTableModel);
		
		TableColumn column;
		
		column = registerTable.getColumnModel().getColumn(0);
		column.setMaxWidth(70);
		column.setMinWidth(70);
		
		scrollPane = new JScrollPane(registerTable);
		
		tablePanel.add(scrollPane);
		
		this.add(tablePanel);
		
		controller.getMainFrame().show();
		
	}
	
	/**
	 * Updates the table cell with the given register to reflect it's change in value
	 * @@param regID The register that has changed in value
	 */
	public void regChanged(String regID) {
		registerTableModel.regChanged(regID);
	}
}


/**
 * Table model for the register table
 */
class RegisterTableModel extends AbstractTableModel {
		
	private String[] columnNames = { "Register", "Value" };
		
	private String[] registerNames = {
		"PC", "LO", "HI", "$zero", "$at", "$v0", "$v1", "$a0",
		"$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6",
		"$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6",
		"$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra"
	};
		
	protected Processor processor;
		
	RegisterTableModel(YAMSGui controller) {
		processor = controller.getProcessor();
	}
		
	public void regChanged(String reg) {
		fireTableDataChanged();
	}
		
	public String getColumnName(int col) {
		return columnNames[col].toString();
	}
			
	public int getRowCount() {
		return 35;
	}
		
	public int getColumnCount() {
		return columnNames.length;
	}
		
	public Object getValueAt(int row, int column) {
		if (column == 1) {
			int regValue;
			switch(row) {
				case 0:
					regValue = processor.registerManager.getRegOnly("PC");
					break;
				case 1:
					regValue = processor.registerManager.getRegOnly("LO");
					break;
				case 2:
					regValue = processor.registerManager.getRegOnly("HI");
					break;
				default:
					regValue = processor.registerManager.getRegOnly(row-3);
					break;
			}
			String value = ("00000000" + Integer.toHexString(regValue).toUpperCase());
			return "0x" + value.substring(value.length() - 8);
		} else {
			return registerNames[row];
		}
	}
		
	
}
@


1.14
log
@*** empty log message ***
@
text
@d23 1
a23 1
	public RegistersPanel(String windowName, YAMSGui controller) {
@


1.13
log
@*** empty log message ***
@
text
@d60 1
a60 1
	 * Notifies this panel of changes to a particular register
d66 16
a81 7
	
	
	/**
	 * @@author ss401
	 * The internal table model of the Registers Table
	 */
	class RegisterTableModel extends AbstractTableModel {
d83 1
a83 1
		private String[] columnNames = { "Register", "Value" };
d85 3
a87 6
		private String[] registerNames = {
			"PC", "LO", "HI", "$zero", "$at", "$v0", "$v1", "$a0",
			"$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5", "$t6",
			"$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6",
			"$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra"
		};
d89 3
a91 1
		protected Processor processor;
d93 3
a95 11
		RegisterTableModel(YAMSGui controller) {
			processor = controller.getProcessor();
		}
		
		public void regChanged(String reg) {
			fireTableDataChanged();
		}
		
		public String getColumnName(int col) {
			return columnNames[col].toString();
		}
d97 3
a99 3
		public int getRowCount() {
			return 35;
		}
d101 3
a103 3
		public int getColumnCount() {
			return columnNames.length;
		}
d105 16
a120 21
		public Object getValueAt(int row, int column) {
			if (column == 1) {
				int regValue;
				switch(row) {
					case 0:
						regValue = processor.registerManager.getRegOnly("PC");
						break;
					case 1:
						regValue = processor.registerManager.getRegOnly("LO");
						break;
					case 2:
						regValue = processor.registerManager.getRegOnly("HI");
						break;
					default:
						regValue = processor.registerManager.getRegOnly(row-3);
						break;
				}
				String value = ("00000000" + Integer.toHexString(regValue).toUpperCase());
				return "0x" + value.substring(value.length() - 8);
			} else {
				return registerNames[row];
d122 4
d127 1
a129 2
	}

@


1.12
log
@*** empty log message ***
@
text
@d30 4
d59 4
a62 1
	
d68 4
a71 1
	
@


1.11
log
@*** empty log message ***
@
text
@a11 1
// TODO: one column or two?
@


1.10
log
@yet more work on gui - including addition of a HexTable
@
text
@d18 1
a18 2
	RegisterTableModel registerTableLeftModel;
	RegisterTableModel registerTableRightModel;
d20 2
a21 4
	JTable registerTableLeft;
	JTable registerTableRight;
	JScrollPane scrollPaneLeft;
	JScrollPane scrollPaneRight;
d37 2
a38 5
		registerTableLeftModel = new RegisterTableLeft(controller);
		registerTableLeft = new JTable(registerTableLeftModel);
		
//		registerTableRightModel = new RegisterTableRight(controller);
//		registerTableRight = new JTable(registerTableRightModel);
d42 1
a42 1
		column = registerTableLeft.getColumnModel().getColumn(0);
a44 11
		column = registerTableLeft.getColumnModel().getColumn(1);
		column.setMaxWidth(80);
		column.setMinWidth(80);
		
//		column = registerTableRight.getColumnModel().getColumn(0);
//		column.setMaxWidth(70);
//		column.setMinWidth(70);
//		column = registerTableRight.getColumnModel().getColumn(1);
//		column.setMaxWidth(80);
//		column.setMinWidth(80);
		
d46 1
a46 2
		scrollPaneLeft = new JScrollPane(registerTableLeft);
//		scrollPaneRight = new JScrollPane(registerTableRight);
d48 1
a48 2
		tablePanel.add(scrollPaneLeft);
//		tablePanel.add(scrollPaneRight);
d58 1
a58 2
		// registerTableModel.regChanged(regID);
		registerTableLeftModel.regChanged(regID);
d63 3
a65 1
	class RegisterTableLeft extends RegisterTableModel {
d69 4
a72 1
			"$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4", "$t5" }; 
d74 1
d76 2
a77 2
		RegisterTableLeft(YAMSGui c) {
			super(c);
d80 2
a81 22
		public Object getValueAt(int row, int column) {
			if (column == 1) {
				int regValue;
				switch(row) {
					case 0:
						regValue = processor.registerManager.getRegOnly("PC");
						break;
					case 1:
						regValue = processor.registerManager.getRegOnly("LO");
						break;
					case 2:
						regValue = processor.registerManager.getRegOnly("HI");
						break;
					default:
						regValue = processor.registerManager.getRegOnly(row-3);
						break;
				}
				String value = ("00000000" + Integer.toHexString(regValue).toUpperCase());
				return "0x" + value.substring(value.length() - 8);
			} else {
				return registerNames[row];
			}
a82 3
	}
	
	class RegisterTableRight extends RegisterTableModel {
d84 7
a90 3
		private String[] registerNames = {
			"$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5", "$s6",
			"$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp", "$fp", "$ra" };
d92 2
a93 2
		RegisterTableRight(YAMSGui c) {
			super(c);
a118 33
		
	}
	
	
	abstract class RegisterTableModel extends AbstractTableModel {
		
		private String[] columnNames = { "Register", "Value" };
		
		private String[] registerNames;
		
		protected Processor processor;
		
		RegisterTableModel(YAMSGui controller) {
			processor = controller.getProcessor();
		}
		
		public void regChanged(String reg) {
			fireTableDataChanged();
		}
		
		public String getColumnName(int col) {
			return columnNames[col].toString();
		}
			
		public int getRowCount() {
			return 16;
		}
		
		public int getColumnCount() {
			return columnNames.length;
		}
		

@


1.9
log
@updated data panel
@
text
@d12 1
@


1.8
log
@*** empty log message ***
@
text
@d42 2
a43 2
		registerTableRightModel = new RegisterTableRight(controller);
		registerTableRight = new JTable(registerTableRightModel);
d54 6
a59 6
		column = registerTableRight.getColumnModel().getColumn(0);
		column.setMaxWidth(70);
		column.setMinWidth(70);
		column = registerTableRight.getColumnModel().getColumn(1);
		column.setMaxWidth(80);
		column.setMinWidth(80);
d63 1
a63 1
		scrollPaneRight = new JScrollPane(registerTableRight);
d66 1
a66 1
		tablePanel.add(scrollPaneRight);
d77 1
@


1.7
log
@*** empty log message ***
@
text
@d17 2
a18 1
	RegisterTableModel registerTableModel;
d20 4
a23 2
	JTable registerTable;
	JScrollPane scrollPane;
d37 1
a37 4
		tablePanel.setLayout(new GridLayout(1,1));
				
		registerTableModel = new RegisterTableModel(controller);
		registerTable = new JTable(registerTableModel);
d39 16
a54 1
		TableColumn column = registerTable.getColumnModel().getColumn(0);
d57 4
d62 2
a63 1
		scrollPane = new JScrollPane(registerTable);
d65 2
a66 1
		tablePanel.add(scrollPane);
d76 1
a76 1
		registerTableModel.regChanged(regID);
d81 1
a81 3
	class RegisterTableModel extends AbstractTableModel {
		
		private String[] columnNames = { "Register", "Value" };
d85 1
a85 5
			"$a1", "$a2", "$a3", "$t0", "$t1", "$t2", "$t3", "$t4",
			"$t5", "$t7", "$s0", "$s1", "$s2", "$s3", "$s4", "$s5",
			"$s6", "$s7", "$t8", "$t9", "$k0", "$k1", "$gp", "$sp",
			"$fp", "$ra" };  
		
a86 1
		private Processor processor;
d88 2
a89 2
		RegisterTableModel(YAMSGui controller) {
			processor = controller.getProcessor();
d92 22
a113 2
		public void regChanged(String reg) {
			fireTableDataChanged();
d115 3
d119 3
a121 7
		public String getColumnName(int col) {
			return columnNames[col].toString();
		}
			
		public int getRowCount() {
			return 35;
		}
d123 2
a124 2
		public int getColumnCount() {
			return columnNames.length;
d150 33
@


1.6
log
@GUI updates Galore!
@
text
@d1 1
a1 6
/*
 * Created on 21-Nov-2003
 *
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
d64 8
d114 1
a114 10
				switch (row) {
					case 0:
						return "PC";
					case 1:
						return "LO";
					case 2:
						return "HI";
					default:
						return "$" + (row-3);
				}
@


1.5
log
@*** empty log message ***
@
text
@d17 1
a17 4
/**
 * @@author ss401
 *
 */
d23 3
d38 1
a38 1
		JPanel tablePanel = new JPanel();
d40 3
d44 3
a46 2
		registerTableModel = new RegisterTableModel(controller);
		JTable registerTable = new JTable(registerTableModel);
d48 1
a48 1
		JScrollPane scrollPane = new JScrollPane(registerTable);
d54 2
d76 1
a76 13
			
			// convert string to number
			if (reg.equalsIgnoreCase("PC")) {
				fireTableCellUpdated(0,0);
			} else if (reg.equalsIgnoreCase("LO")) {
				fireTableCellUpdated(0,1);
			} else if (reg.equalsIgnoreCase("HI")) {
				fireTableCellUpdated(0,2);
			} else {
				int regID = Integer.valueOf(reg.substring(1)).intValue();
				fireTableCellUpdated(0,3+regID);
			}
			
d108 2
a109 1
				return "0x" + Integer.toHexString(regValue).toUpperCase();
@


1.4
log
@*** empty log message ***
@
text
@d41 2
a42 2
//		registerTableModel = new RegisterTableModel(controller);
		JTable registerTable = new JTable(new RegisterTableModel(controller));
d72 11
a82 11
//			if (reg.equalsIgnoreCase("PC")) {
//				fireTableCellUpdated(0,0);
//			} else if (reg.equalsIgnoreCase("LO")) {
//				fireTableCellUpdated(0,1);
//			} else if (reg.equalsIgnoreCase("HI")) {
//				fireTableCellUpdated(0,2);
//			} else {
//				int regID = Integer.valueOf(reg.substring(1)).intValue();
//				fireTableCellUpdated(0,3+regID);
//			}
//			
d99 1
d102 2
a103 1
						return new Integer(processor.registerManager.getRegOnly("PC"));
d105 2
a106 1
						return new Integer(processor.registerManager.getRegOnly("LO"));
d108 2
a109 1
						return new Integer(processor.registerManager.getRegOnly("HI"));
d111 2
a112 1
						return new Integer(processor.registerManager.getRegOnly(row-3));
d114 1
@


1.3
log
@lots of gooey updates
@
text
@d9 1
a9 2
import java.awt.FlowLayout;
import java.awt.GridLayout;
d11 2
a12 4
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
d23 5
a27 3
	/**
	 * 
	 */
d30 91
a120 41
//		setTitle("Register Contents");

		this.setLayout(new FlowLayout());

		//TODO: At the moment, 2 sub-panels are required to enforce 2 columns
		//that are read down THEN across (as opposed to page-wise of across then
		//down). What is needed is a 'vertical' flow layout, but there doesn't appear
		//to be one.
		JPanel left = new JPanel();
		JPanel right = new JPanel();

		left.setVisible(true);
		right.setVisible(true);

		left.setLayout(new GridLayout(0, 2));

		this.add(left);
		this.add(right);

		left.setLayout(new GridLayout(0,2));
		for (int i = 0; i < 5; i++) {

			JLabel registerName = new JLabel("Register " + i + " ");
			JTextField b = new JTextField("0x11111");
			b.setVisible(true);
			b.setEditable(false);
			registerName.setVisible(true);
			left.add(registerName);
			left.add(b);
		}
		//right.setLayout(new BoxLayout(right, BoxLayout.Y_AXIS));
		right.setLayout(new GridLayout(0,2));
		for (int i = 0; i < 5; i++) {

			JLabel registerName1 = new JLabel("Register " + i+" ");
			JTextField b1 = new JTextField("0x0000");
			b1.setEditable(false);
			b1.setVisible(true);
			registerName1.setVisible(true);
			right.add(registerName1);
			right.add(b1);
d122 2
a123 3

		//TODO: To find out what the actual registers are, you can use the 'ValidRegisters' class

@


1.2
log
@*** empty log message ***
@
text
@d30 1
a30 1
		super(windowName, controller);
@


1.1
log
@*** empty log message ***
@
text
@d29 2
a30 2
	public RegistersPanel(int width, int height, YAMSGui controller) {
		super(width, height, controller);
@

