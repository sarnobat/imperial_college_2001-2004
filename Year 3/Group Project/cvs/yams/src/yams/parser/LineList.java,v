head	1.4;
access;
symbols
	yams-final-19-12-03:1.4
	yams-release2-17-12-03:1.4
	yams-release-17-12-03:1.4
	cleanup:1.4.0.2
	Root_cleanup:1.4
	stable-13-12-2003:1.4;
locks; strict;
comment	@# @;


1.4
date	2003.12.02.13.34.03;	author qq01;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.24.01.26.20;	author qq01;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.14.15.29.38;	author qq01;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.10.20.24.33;	author qq01;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Updated javadoc
@
text
@/*
 * Created on 06-Nov-2003
 */
package yams.parser;

import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;

/**
 * Models the sequence of lines of users instructions.
 * 
 * @@author qq01
 */
public class LineList {
	
	private int currentLine;
	
	/**
	 * Points to the last line of the list, can also act as a total line count.
	 */
	private int lastLine;
	private Map lines;

	public LineList() {
		lines = new TreeMap();
		currentLine = 0;
		lastLine = 0;
	}

	/**
	 * Appends a line at the end of the list of instructions.
	 * 
	 * @@param line the <code>Line</code> to be appended at the end of the list
	 */
	protected void appendLine(Line line) {
		lastLine++;
		lines.put(new Integer(lastLine), line);
	}

	/**
	 * Gets a specific line.
	 * 
	 * @@param lineNumber specify the line number
	 * @@return the <code>Line</code> object
	 */
	public Line getLine(int lineNumber) {
		return (Line) lines.get(new Integer(lineNumber));
	}

	/**
	 * Gets the next line is the users instruction file.
	 * 
	 * @@return the <code>Line</code> object
	 */
	public Line nextLine() {
		currentLine++;
		return (Line) lines.get(new Integer(currentLine));
	}
	
	public String toString(){
		StringBuffer buffer = new StringBuffer();
		
		Iterator it = lines.values().iterator();
		
		while(it.hasNext()){
			Line l = (Line) it.next();
			buffer.append(l.toString());
			buffer.append("\n");
		}
		return buffer.toString();
	}
	
	/**
	 * Gives a total line count.
	 * 
	 * @@return total line count
	 */
	public int totalLines(){
		return lastLine;
	}
}
@


1.3
log
@Updated javadoc comments
@
text
@a0 1
package yams.parser;
a2 1
 *
d4 1
d16 1
@


1.2
log
@*** empty log message ***
@
text
@a16 1
	private Map lines;
d23 1
d32 11
a42 1
	 * Gets a specific line
d52 1
a52 1
	 * Gets the next line is the users instruction file
d54 1
a54 1
	 * @@return the <code>Line<code> object
a59 19

	/**
	 * Appends a line at the end of the list of instructions
	 * 
	 * @@param line the <code>Line</code> to be appended at the end of the list
	 */
	protected void appendLine(Line line) {
		lastLine++;
		lines.put(new Integer(lastLine), line);
	}
	
	/**
	 * Gives a total line count
	 * 
	 * @@return total line count
	 */
	public int totalLines(){
		return lastLine;
	}
d72 9
@


1.1
log
@*** empty log message ***
@
text
@d7 1
d68 13
@

