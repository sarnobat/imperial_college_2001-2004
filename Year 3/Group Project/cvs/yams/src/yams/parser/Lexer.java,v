head	1.19;
access;
symbols
	yams-final-19-12-03:1.19
	yams-release2-17-12-03:1.19
	yams-release-17-12-03:1.19
	cleanup:1.18.0.2
	Root_cleanup:1.18
	stable-13-12-2003:1.18;
locks; strict;
comment	@# @;


1.19
date	2003.12.17.15.00.06;	author qq01;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.08.12.42.31;	author qq01;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.04.16.34.34;	author qq01;	state Exp;
branches;
next	1.16;

1.16
date	2003.12.03.17.54.53;	author qq01;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.03.17.25.12;	author qq01;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.03.17.07.10;	author qq01;	state Exp;
branches;
next	1.13;

1.13
date	2003.12.03.17.02.02;	author qq01;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.03.16.55.10;	author qq01;	state Exp;
branches;
next	1.11;

1.11
date	2003.12.03.16.54.25;	author qq01;	state Exp;
branches;
next	1.10;

1.10
date	2003.12.02.16.53.25;	author ajb101;	state Exp;
branches;
next	1.9;

1.9
date	2003.12.02.13.34.03;	author qq01;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.02.10.29.41;	author qq01;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.28.17.01.27;	author qq01;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.28.16.53.08;	author qq01;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.24.23.15.42;	author qq01;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.23.22.49.01;	author qq01;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.18.13.59.34;	author qq01;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.15.18.00.39;	author qq01;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.15.16.57.09;	author qq01;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Updated lexer to fix the bug with trailing space and = sign
@
text
@/*
 * Created on 2003-11-1
 */
package yams.parser;

import java.util.Vector;

/**
 * Breaks users program into lexical tokens for the parser to do further check.
 * 
 * @@author Qian Qiao <a href="mailto:qq01@@doc.ic.ac.uk">qq01@@doc.ic.ac.uk</a>
 */
public class Lexer {
	/**
	 * Colon.
	 */
	public static final int COLON = 0;

	/**
	 * Comma.
	 */
	public static final int COMMA = 1;

	/**
	 * Dollar.
	 */
	public static final int DOLLAR = 2;

	/**
	 * Dot.
	 */
	public static final int DOT = 3;

	/**
	 * End of file.
	 */
	public static final int EOF = 4;
	/**
	 * Identifier.
	 */
	public static final int IDENTIFIER = 5;

	/**
	 * Integer.
	 */
	public static final int INTEGER = 6;

	/**
	 * Left bracket.
	 */
	public static final int LEFT_PAR = 7;

	/**
	 * Minus.
	 */
	public static final int MINUS = 8;

	/**
	 * New line.
	 */
	public static final int NEWLINE = 9;

	/**
	 * Plus.
	 */
	public static final int PLUS = 10;

	/**
	 * Double quote.
	 */
	public static final int QUOTE = 12;

	/**
	 * Right bracket.
	 */
	public static final int RIGHT_PAR = 11;

	public static final int ESCAPED_CHAR = 13;

	public static final int EQUALS = 14;

	private int currentCharIndex = -1;

	private int currentTokenIndex = 0;

	private int currentOriginalIndex = 0;

	private int mark = 0;

	private int lineNumber = 1;

	private StringBuffer program;

	private Vector tokens;

	/**
	 * Creates an instance of the lexer class.
	 * 
	 * @@param program user's program input.
	 * @@throws LexerException if the lexer is unable to tokenize the program.
	 */
	public Lexer(StringBuffer program) throws LexerException {
		this.program = program;

		if (program.charAt(program.length() - 1) != '\n') {
			program.append('\n');
		}

		tokens = new Vector();

		tokenize();
	}

	/**
	 * Returns the current token.
	 * 
	 * @@return the current token.
	 */
	public Token currentToken() {
		return (Token) tokens.elementAt(currentTokenIndex);
	}

	/**
	 * Returns the current line number.
	 * 
	 * @@return the current line number.
	 */
	public int getLineNumber() {
		return lineNumber;
	}

	/**
	 * Returns the next token.
	 */
	private Token getNextToken() throws LexerException {
		// test for End Of File
		if (currentCharIndex >= program.length() - 1) {
			return new Token(EOF, "EOF");
		} else { // if not EOF
			char symbol;

			// ignore whitespaces
			while (isWhiteSpace(symbol = nextSymbol())) {}

			// ignores comments
			if (symbol == ';') {
				while ((symbol = nextSymbol()) != '\n') {}
			}

			if (symbol == '#') {
				while ((symbol = nextSymbol()) != '\n') {}
			}

			StringBuffer buffer = new StringBuffer();

			if (symbol == '\\') {
				buffer.append(symbol);
				buffer.append(symbol = nextSymbol());

				return new Token(ESCAPED_CHAR, buffer.toString());
			}

			if (isAlpha(symbol)) {

				buffer.append(symbol);

				while ((symbol = nextSymbol()) != (char) - 1
					&& isAlpha(symbol)
					|| isNumber(symbol)) {
					buffer.append(symbol);
				}

				pushCharBack();

				return new Token(IDENTIFIER, buffer.toString());

			} else if (isNumber(symbol)) {

				buffer.append(symbol);

				while (isNumber(symbol = nextSymbol())) {
					buffer.append(symbol);
				}

				pushCharBack();

				return new Token(INTEGER, buffer.toString());

			} else if (symbol == '$') {
				return new Token(DOLLAR, "$");
			} else if (symbol == ',') {
				return new Token(COMMA, ",");
			} else if (symbol == '-') {
				return new Token(MINUS, "-");
			} else if (symbol == '+') {
				return new Token(PLUS, "+");
			} else if (symbol == ':') {
				return new Token(COLON, ":");
			} else if (symbol == '(') {
				return new Token(LEFT_PAR, "(");
			} else if (symbol == ')') {
				return new Token(RIGHT_PAR, ")");
			} else if (symbol == '\n') {
				return new Token(NEWLINE, "\\n");
			} else if (symbol == '\"') {
				return new Token(QUOTE, "\"");
			} else if (symbol == '.') {
				return new Token(DOT, ".");
			} else if (symbol == '=') {
				return new Token(EQUALS, "=");
			} else {
				throw new LexerException(symbol, lineNumber);
			}
		}
	}

	private boolean isAlpha(char c) {
		return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c == '_');
	}

	private boolean isNumber(char c) {
		return c >= '0' && c <= '9';
	}

	private boolean isWhiteSpace(char c) {
		switch (c) {
			case ' ' :
			case '\r' :
			case '\t' :
				{
					return true;
				}
		}
		return false;
	}

	private char nextSymbol() {
		if (currentCharIndex >= program.length() - 1) {
			return (char) - 1;
		}
		return program.charAt(++currentCharIndex);
	}

	/**
	 * Returns the next token.
	 * 
	 * @@return the next token.
	 */
	public Token nextToken() {
		Token currentToken = (Token) tokens.elementAt(currentTokenIndex++);

		if (currentToken.getType() == NEWLINE) {
			lineNumber++;
		}

		return currentToken;
	}

	private void pushCharBack() {
		if (currentCharIndex != program.length()) {
			currentCharIndex--;
		}
	}

	/**
	 * Pushes the current token back onto the list of tokens.
	 */
	public void pushTokenBack() {
		Token currentToken = (Token) tokens.elementAt(currentTokenIndex);

		if (currentToken.getType() == NEWLINE) {
			lineNumber--;
		}

		currentTokenIndex--;
	}

	private void tokenize() throws LexerException {

		Token t = getNextToken();

		while (t.getType() != EOF) {
			tokens.add(t);
			t = getNextToken();
		}

		tokens.add(new Token(EOF, "EOF"));
	}

	protected void mark() {
		mark = currentTokenIndex;
	}

	protected void rewind() {

		while (currentTokenIndex > mark) {
			pushTokenBack();
		}
	}

	protected String getOriginalLine() {
		StringBuffer buffer = new StringBuffer();

		char ch = '\n';
		if (currentOriginalIndex < program.length()) {
			ch = program.charAt(currentOriginalIndex);
		}

		while (ch != '\n' && currentOriginalIndex < program.length()) {
			buffer.append(ch);
			currentOriginalIndex++;
			ch = program.charAt(currentOriginalIndex);
		}

		if (currentOriginalIndex < program.length()) {
			currentOriginalIndex++;
		}

		return buffer.toString();
	}
}
@


1.18
log
@returns user's original program
@
text
@d80 2
d209 2
d312 1
a312 1
			ch = program.charAt(currentOriginalIndex); 
@


1.17
log
@*** empty log message ***
@
text
@d84 3
a86 1
	private int mark =0;
d141 1
a141 2
			while (isWhiteSpace(symbol = nextSymbol())) {
			}
d145 1
a145 2
				while ((symbol = nextSymbol()) != '\n') {
				}
d149 1
a149 2
				while ((symbol = nextSymbol()) != '\n') {
				}
d287 1
a287 1
		mark= currentTokenIndex;
d291 1
a291 1
		
d295 21
@


1.16
log
@*** empty log message ***
@
text
@d84 1
a84 1
	private int mark = 0;
d288 1
a288 1
		mark = currentTokenIndex;
d292 1
@


1.15
log
@fixed parser
@
text
@a84 1
	private boolean markSet = false;
a288 1
		markSet = true;
d292 1
a292 1
		while (currentTokenIndex > mark && markSet) {
a294 2

		markSet = false;
@


1.14
log
@*** empty log message ***
@
text
@d84 3
d155 2
a156 2
			
			if(symbol == '\\'){
d159 1
a159 1
				
d286 13
@


1.13
log
@*** empty log message ***
@
text
@a82 3
	
	private int mark = 0;
	private boolean markSet = false;
a282 13
	}
	
	protected void mark(){
		mark = currentTokenIndex;
		markSet = true;
	}
	
	protected void rewind(){
		while(currentTokenIndex > mark && markSet){
			pushTokenBack();
		}
		
		markSet = false;
@


1.12
log
@*** empty log message ***
@
text
@d83 3
d286 13
@


1.11
log
@fixed parser
@
text
@a84 2
	
	private int mark = 0;
a282 10
	}
	
	protected void mark(){
		mark = currentTokenIndex;
	}
	
	protected void rewind(){
		while(currentTokenIndex > mark){
			pushTokenBack();
		}
@


1.10
log
@*** empty log message ***
@
text
@d85 2
d285 10
@


1.9
log
@Updated javadoc
@
text
@d78 2
d137 2
a138 1
			while (isWhiteSpace(symbol = nextSymbol())) {}
d142 2
a143 1
				while ((symbol = nextSymbol()) != '\n') {}
d147 2
a148 1
				while ((symbol = nextSymbol()) != '\n') {}
d152 7
@


1.8
log
@fixed a bug that not being able to ignore comments starting with '#'
@
text
@d15 1
a15 1
	 * colon token
d20 1
a20 1
	 * comma token
d25 1
a25 1
	 * dollar token
d30 1
a30 1
	 * dot token
d35 1
a35 1
	 * end of file
d39 1
a39 1
	 * identifier Token
d44 1
a44 1
	 * integer token
d49 1
a49 1
	 * left bracket
d54 1
a54 1
	 * minus sign
d59 1
a59 1
	 * new line
d64 1
a64 1
	 * plus sign
d68 3
d74 1
a74 1
	 * right bracket
a260 3
	/**
	 * 
	 */
@


1.7
log
@*** empty log message ***
@
text
@d139 4
@


1.6
log
@*** empty log message ***
@
text
@d67 2
a68 2
	
	public static final int QUOTE =12;
d183 1
a183 1
			} else if (symbol == '\"'){
d185 3
a187 1
			}else{
@


1.5
log
@2 new token types, PLUS and DOT
@
text
@d67 2
d183 3
a185 1
			} else {
@


1.4
log
@Improved code readability.
Fixed a bug that if missing "\n" at the end of the input, the lexer fall into a infinite loop.
@
text
@d28 6
d37 1
a37 1
	public static final int EOF = 3;
d41 1
a41 1
	public static final int IDENTIFIER = 4;
d46 1
a46 1
	public static final int INTEGER = 5;
d51 1
a51 1
	public static final int LEFT_PAR = 6;
d56 1
a56 1
	public static final int MINUS = 7;
d61 6
a66 1
	public static final int NEWLINE = 8;
d71 1
a71 1
	public static final int RIGHT_PAR = 9;
d91 2
a92 2
		
		if (program.charAt(program.length()-1) != '\n'){
d102 9
d140 1
a140 1
				
d142 1
a142 1
				
d148 1
a148 1
				
d150 1
a150 1
				
d154 1
a154 1
				
d156 1
a156 1
				
d160 1
a160 1
				
d162 1
a162 1
				
d164 1
a164 1
				
d171 2
a211 9
	}
	
	/**
	 * Returns the current token.
	 * 
	 * @@return the current token.
	 */
	public Token currentToken(){
		return (Token) tokens.elementAt(currentTokenIndex);
@


1.3
log
@*** empty log message ***
@
text
@d80 4
d100 1
a100 1
	 * 
d120 1
d122 1
d128 1
d130 1
d134 1
d136 1
d140 1
d142 1
d144 1
a157 1
				lineNumber++;
@


1.2
log
@Replaced MIPSLexer class with the new class Lexer.
@
text
@d73 1
a73 1
	 * Creates an instance of the lexer class
d75 2
a76 2
	 * @@param program user's program input
	 * @@throws LexerException if the lexer is unable to tokenize the program
d89 1
a89 1
	 * @@return the current line number
d180 5
d189 5
d210 3
@


1.1
log
@Added a replacement of the MIPSLexer class that supports token
pushback and StringBuffer input.
@
text
@d2 1
a2 1
 * Created on 2003-11-15
d9 3
a11 1
 * @@author Qian Qiao(qq01)
a13 1

a61 2
	private StringBuffer program;

d68 2
d72 7
a78 1
	public Lexer(StringBuffer program) {
d87 1
d89 1
d91 2
a92 3
	private void tokenize() {
		// TODO Auto-generated method stub

d98 1
a98 1
	private Token getNextToken() {
d104 46
a149 1
			return null;
d153 2
a154 5
	/**
	 * @@return
	 */
	public int getLineNumber() {
		return lineNumber;
d157 2
a158 5
	private char nextSymbol() {
		if (currentCharIndex >= program.length() - 1) {
			return (char) - 1;
		}
		return program.charAt(++currentCharIndex);
d171 52
@

