head	1.26;
access;
symbols
	yams-final-19-12-03:1.26
	yams-release2-17-12-03:1.26
	yams-release-17-12-03:1.26
	cleanup:1.24.0.2
	Root_cleanup:1.24
	stable-13-12-2003:1.24;
locks; strict;
comment	@# @;


1.26
date	2003.12.17.15.00.06;	author qq01;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.14.03.54.20;	author jkm01;	state Exp;
branches;
next	1.24;

1.24
date	2003.12.05.16.18.15;	author qq01;	state Exp;
branches;
next	1.23;

1.23
date	2003.12.04.18.29.09;	author qq01;	state Exp;
branches;
next	1.22;

1.22
date	2003.12.04.17.40.09;	author qq01;	state Exp;
branches;
next	1.21;

1.21
date	2003.12.04.17.29.18;	author qq01;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.04.16.34.34;	author qq01;	state Exp;
branches;
next	1.19;

1.19
date	2003.12.02.16.53.25;	author ajb101;	state Exp;
branches;
next	1.18;

1.18
date	2003.12.02.13.34.03;	author qq01;	state Exp;
branches;
next	1.17;

1.17
date	2003.12.01.13.46.49;	author qq01;	state Exp;
branches;
next	1.16;

1.16
date	2003.11.30.20.03.39;	author qq01;	state Exp;
branches;
next	1.15;

1.15
date	2003.11.30.18.19.44;	author qq01;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.28.16.53.08;	author qq01;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.28.15.59.57;	author qq01;	state Exp;
branches;
next	1.12;

1.12
date	2003.11.27.21.10.55;	author qq01;	state Exp;
branches;
next	1.11;

1.11
date	2003.11.26.21.48.22;	author qq01;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.24.23.16.15;	author qq01;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.15.18.00.39;	author qq01;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.14.16.18.40;	author qq01;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.14.15.48.46;	author qq01;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.14.15.29.38;	author qq01;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.11.21.16.23;	author qq01;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.11.01.17.45;	author qq01;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.10.20.24.34;	author qq01;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.10.19.21.11;	author qq01;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.10.10.57.49;	author qq01;	state Exp;
branches;
next	;


desc
@@


1.26
log
@Updated lexer to fix the bug with trailing space and = sign
@
text
@/*
 * Created on 06-Nov-2003
 */
package yams.parser;

import java.util.Iterator;
import java.util.List;

/**
 * Models a single instruction, all instructions should subclass this abstract class.
 * 
 * @@author qq01
 */
public abstract class Instruction {

	/**
	 * Indicates the instructio is a directive.
	 */
	public static final int TYPE_DIRECTIVE = 0;

	/**
	 * Indicates the instruction is a I type instruction.
	 */
	public static final int TYPE_I = 1;

	/**
	 * Indicates the instruction is a J type instruction.
	 */
	public static final int TYPE_J = 2;

	/**
	 * Indicates the instruction is a R type instruction.
	 */
	public static final int TYPE_R = 3;

	protected String name;

	// Operands must be a sorted Collection
	protected List operands;

	/**
	 * Returns the name of the instruction.
	 * 
	 * @@return the name of the instruction
	 */
	public String getName() {
		return name;
	}

	/**
	 * Returns the list of oprands.
	 * 
	 * @@return a list of the oprands of the instruction
	 */
	public List getOperands() {
		return operands;
	}

	/**
	 * Returns the type of the instruction.
	 * 
	 * @@return the type of the instruction.
	 */
	public abstract int getType();

	private void match(Lexer lexer, int expected)
		throws LexerException, ParseException {
		if (lexer.currentToken().getType() == expected) {
			lexer.nextToken();
		} else {
			throw new ParseException(
				lexer.currentToken(),
				expected,
				lexer.getLineNumber());
		}
	}

	private AddressingOperand parseAddressingOperand(Lexer lexer)
		throws LexerException, ParseException {

		Token token = lexer.nextToken();

		if (token.getType() == Lexer.LEFT_PAR) { // ($register) format
			lexer.pushTokenBack();
			return new AddressingOperand(
				AddressingOperand.REGISTER,
				parseParRegister(lexer));
		} else if (token.getType() == Lexer.IDENTIFIER) { // detects a label
			String label = token.getValue();
			token = lexer.nextToken();

			if ((token.getType() == Lexer.PLUS)
				|| (token.getType() == Lexer.MINUS)) { //label +/- format

				String sign = token.getValue();

				//token = lexer.nextToken();

				int immediate = parseImmediateValue(lexer, sign);

				lexer.nextToken();
				token = lexer.nextToken();

				if (token.getType() == Lexer.LEFT_PAR) {
					lexer.pushTokenBack();

					String register = parseParRegister(lexer);

					return new AddressingOperand(
						AddressingOperand.LABEL_PLUS_IMMEDIATE_REGISTER,
						label,
						immediate,
						register);

				} else {
					lexer.pushTokenBack();
					return new AddressingOperand(
						AddressingOperand.LABEL_PLUS_IMMEDIATE,
						label,
						immediate);
				}

			} else {
				lexer.pushTokenBack();
				return new AddressingOperand(AddressingOperand.LABEL, label);
			}
		} else {
			String sign;
			if (token.getType() == Lexer.PLUS
				|| token.getType() == Lexer.MINUS) {
				sign = token.getValue();
			} else {
				sign = "+";
				lexer.pushTokenBack();
			}

			int immediate = parseImmediateValue(lexer, sign);

			lexer.nextToken();
			token = lexer.nextToken();

			if (token.getType() == Lexer.LEFT_PAR) {
				lexer.pushTokenBack();
				String register = parseParRegister(lexer);
				return new AddressingOperand(
					AddressingOperand.IMMEDIATE_REGISTER,
					immediate,
					register);
			} else {
				lexer.pushTokenBack();
				return new AddressingOperand(
					AddressingOperand.IMMEDIATE,
					immediate);
			}
		}
	}

	private Operand parseImmediateOperand(Lexer lexer)
		throws LexerException, ParseException {

		String sign;
		if (lexer.currentToken().getType() == Lexer.PLUS
			|| lexer.currentToken().getType() == Lexer.MINUS) {
			sign = lexer.currentToken().getValue();
			lexer.nextToken();
		} else {
			sign = "+";
		}

		ImmediateOperand io =
			new ImmediateOperand(parseImmediateValue(lexer, sign));
		lexer.nextToken();
		return io;
	}

	private int parseImmediateValue(Lexer lexer, String sign)
		throws LexerException, ParseException {

		int intvalue;

		if (lexer.currentToken().getValue().equals("0")) {
			lexer.mark();
			lexer.nextToken();
			if (lexer.currentToken().getType() == Lexer.IDENTIFIER) {
				intvalue =
					Integer.parseInt(
						lexer.currentToken().getValue().substring(1),
						16);
			} else {
				lexer.rewind();
				intvalue = 0;
			}
		} else {
			if (!lexer.currentToken().getValue().startsWith("0")) {
				intvalue = Integer.parseInt(lexer.currentToken().getValue());
			} else {
				intvalue =
					Integer.parseInt(
						lexer.currentToken().getValue().substring(1),
						8);

			}
		}
		
		if (sign.equals("-")) {
			return 0 - intvalue;
		} else {
			return intvalue;
		}
	}

	private LabelOperand parseLabelOperand(Lexer lexer)
		throws LexerException, ParseException {
		Token token = lexer.nextToken();

		if (token.getType() == Lexer.IDENTIFIER) {
			return new LabelOperand(token.getValue());
		} else {
			throw new ParseException(
				token,
				Lexer.IDENTIFIER,
				lexer.getLineNumber());
		}
	}

	/**
	 * Parses oprands needed by an instruction.
	 * 
	 * @@param lexer lexer that tokenizes user's programs
	 * @@param expected array of types of oprands expected by an instruction
	 * @@throws LexerException if the lexer finds any error
	 * @@throws ParseException if the parser finds any error
	 */
	protected void parseOperands(Lexer lexer, int[] expected)
		throws LexerException, ParseException {

		Token token;

		for (int i = 0; i < expected.length; i++) {
			switch (expected[i]) {
				case Operand.TYPE_REGISTER :
					{
						operands.add(parseRegisterOperand(lexer));
						break;
					}
				case Operand.TYPE_IMMEDIATE :
					{
						operands.add(parseImmediateOperand(lexer));
						break;
					}
				case Operand.TYPE_ADDRESSING :
					{
						operands.add(parseAddressingOperand(lexer));
						break;
					}
				case Operand.TYPE_STRING :
					{
						operands.add(parseStringOperand(lexer));
						break;
					}
				case Operand.TYPE_LABEL :
					{
						operands.add(parseLabelOperand(lexer));
						break;
					}
				default :
					{
						throw new ParseException(
							"Unexpected token:"
								+ lexer.currentToken().getValue(),
							lexer.getLineNumber());
					}
			}
			if (i != expected.length - 1) {
				token = lexer.nextToken();
				if (token.getType() != Lexer.COMMA) {
					throw new ParseException(
						"Expected ',' - not '" + token.getValue() + "'",
						lexer.getLineNumber());
				}
			}
		}
	}

	private String parseParRegister(Lexer lexer)
		throws LexerException, ParseException {

		match(lexer, Lexer.LEFT_PAR);
		match(lexer, Lexer.DOLLAR);
		String register = lexer.currentToken().getValue();
		match(lexer, Lexer.IDENTIFIER);
		match(lexer, Lexer.RIGHT_PAR);

		return register;
	}

	private RegisterOperand parseRegisterOperand(Lexer lexer)
		throws LexerException, ParseException {
		Token token = lexer.nextToken();
		if (token.getType() == Lexer.DOLLAR) {
			token = lexer.nextToken();
			return new RegisterOperand(token.getValue());
		} else {
			throw new ParseException(
				"Expected '$', not '" + token.getValue() + "'"+" name "+name,
				lexer.getLineNumber());
		}
	}

	private StringOperand parseStringOperand(Lexer lexer)
		throws LexerException, ParseException {
		match(lexer, Lexer.QUOTE);
		StringBuffer s = new StringBuffer();
		while (lexer.currentToken().getType() != Lexer.QUOTE) {
			s.append(lexer.currentToken().getValue());
			s.append(' ');
			lexer.nextToken();
		}
		lexer.nextToken();
		return new StringOperand(s.toString());
	}

	/* (non-Javadoc)
	 * @@see java.lang.Object#toString()
	 */
	public String toString() {
		StringBuffer buffer = new StringBuffer("Instruction:" + name + " ");

		Operand op;

		Iterator it = operands.iterator();

		while (it.hasNext()) {
			op = (Operand) it.next();
			buffer.append(op.toString());
		}

		return buffer.toString();
	}
}
@


1.25
log
@*** empty log message ***
@
text
@d66 1
a66 1
	private Operand parseImmediateOperand(Lexer lexer)
d68 1
a68 5

		String sign;
		if (lexer.currentToken().getType() == Lexer.PLUS
			|| lexer.currentToken().getType() == Lexer.MINUS) {
			sign = lexer.currentToken().getValue();
a70 75
			sign = "+";
		}

		ImmediateOperand io =
			new ImmediateOperand(parseImmediateValue(lexer, sign));
		lexer.nextToken();
		return io;
	}

	/**
	 * Parses oprands needed by an instruction.
	 * 
	 * @@param lexer lexer that tokenizes user's programs
	 * @@param expected array of types of oprands expected by an instruction
	 * @@throws LexerException if the lexer finds any error
	 * @@throws ParseException if the parser finds any error
	 */
	protected void parseOperands(Lexer lexer, int[] expected)
		throws LexerException, ParseException {

		Token token;

		for (int i = 0; i < expected.length; i++) {
			switch (expected[i]) {
				case Operand.TYPE_REGISTER :
					{
						operands.add(parseRegisterOperand(lexer));
						break;
					}
				case Operand.TYPE_IMMEDIATE :
					{
						operands.add(parseImmediateOperand(lexer));
						break;
					}
				case Operand.TYPE_ADDRESSING :
					{
						operands.add(parseAddressingOperand(lexer));
						break;
					}
				case Operand.TYPE_STRING :
					{
						operands.add(parseStringOperand(lexer));
						break;
					}
				case Operand.TYPE_LABEL :
					{
						operands.add(parseLabelOperand(lexer));
						break;
					}
				default :
					{
						throw new ParseException(
							"Unexpected token:"
								+ lexer.currentToken().getValue(),
							lexer.getLineNumber());
					}
			}
			if (i != expected.length - 1) {
				token = lexer.nextToken();
				if (token.getType() != Lexer.COMMA) {
					throw new ParseException(
						"Expected ',' - not '" + token.getValue() + "'",
						lexer.getLineNumber());
				}
			}
		}
	}

	private RegisterOperand parseRegisterOperand(Lexer lexer)
		throws LexerException, ParseException {
		Token token = lexer.nextToken();
		if (token.getType() == Lexer.DOLLAR) {
			token = lexer.nextToken();
			return new RegisterOperand(token.getValue());
		} else {
d72 2
a73 15
				"Expected '$', not '" + token.getValue() + "'"+" name "+name,
				lexer.getLineNumber());
		}
	}

	private LabelOperand parseLabelOperand(Lexer lexer)
		throws LexerException, ParseException {
		Token token = lexer.nextToken();

		if (token.getType() == Lexer.IDENTIFIER) {
			return new LabelOperand(token.getValue());
		} else {
			throw new ParseException(
				token,
				Lexer.IDENTIFIER,
d158 1
a158 1
	private String parseParRegister(Lexer lexer)
d161 8
a168 5
		match(lexer, Lexer.LEFT_PAR);
		match(lexer, Lexer.DOLLAR);
		String register = lexer.currentToken().getValue();
		match(lexer, Lexer.IDENTIFIER);
		match(lexer, Lexer.RIGHT_PAR);
d170 4
a173 1
		return register;
d212 86
a297 1
	private void match(Lexer lexer, int expected)
d299 4
a302 2
		if (lexer.currentToken().getType() == expected) {
			lexer.nextToken();
d305 1
a305 2
				lexer.currentToken(),
				expected,
d320 1
a320 1
		return new StringOperand(s.toString().trim());
@


1.24
log
@*** empty log message ***
@
text
@d151 1
a151 1
				"Expected '$', not '" + token.getValue() + "'",
@


1.23
log
@*** empty log message ***
@
text
@d290 1
a290 20

		//		if (lexer.currentToken().getValue().startsWith("0")) {
		//			if (lexer.currentToken().getValue().length() == 1) {
		//				match(lexer, Lexer.INTEGER);
		//
		//				intvalue =
		//					Integer.parseInt(
		//						lexer.currentToken().getValue().substring(1),
		//						16);
		//			} else {
		//				intvalue =
		//					Integer.parseInt(
		//						lexer.currentToken().getValue().substring(1),
		//						8);
		//			}
		//		} else {
		//
		//			intvalue = Integer.parseInt(lexer.currentToken().getValue());
		//		}

@


1.22
log
@*** empty log message ***
@
text
@a257 2
		//		lexer.pushTokenBack();
		//lexer.pushTokenBack();
@


1.21
log
@*** empty log message ***
@
text
@d270 1
d272 9
a280 4
			intvalue =
				Integer.parseInt(
					lexer.currentToken().getValue().substring(1),
					16);
d284 6
a289 6
			}else{
				if(lexer.currentToken().getValue().length() == 1){
					intvalue = 0;
				}else{
					intvalue = Integer.parseInt(lexer.currentToken().getValue().substring(1), 8);
				}
@


1.20
log
@*** empty log message ***
@
text
@d269 15
a283 13
		if (lexer.currentToken().getValue().startsWith("0")) {
			if (lexer.currentToken().getValue().length() == 1) {
				match(lexer, Lexer.INTEGER);

				intvalue =
					Integer.parseInt(
						lexer.currentToken().getValue().substring(1),
						16);
			} else {
				intvalue =
					Integer.parseInt(
						lexer.currentToken().getValue().substring(1),
						8);
d285 1
a285 1
		} else {
d287 18
a304 2
			intvalue = Integer.parseInt(lexer.currentToken().getValue());
		}
@


1.19
log
@*** empty log message ***
@
text
@d68 1
a68 2
		
		
d70 2
a71 1
		if( lexer.currentToken().getType() == Lexer.PLUS || lexer.currentToken().getType() == Lexer.MINUS){
d73 2
a74 1
		}else{
d78 2
a79 1
		ImmediateOperand io = new ImmediateOperand(parseImmediateValue(lexer, sign));
d267 1
a267 5
		if (lexer.currentToken().getValue().equals("0")) {
			match(lexer, Lexer.INTEGER);

			if (lexer.currentToken().getValue().equals("x")) {
				match(lexer, Lexer.IDENTIFIER);
d269 8
a276 3
				return Integer.parseInt(
					sign + lexer.currentToken().getValue(),
					16);
d278 4
a281 3
				return Integer.parseInt(
					sign + lexer.currentToken().getValue(),
					8);
d283 3
d288 5
a292 1
		return Integer.parseInt(lexer.currentToken().getValue());
@


1.18
log
@Updated javadoc
@
text
@d68 8
a75 3
		lexer.nextToken();

		String sign = lexer.currentToken().getValue();
d77 1
d79 1
a79 2

		return new ImmediateOperand(parseImmediateValue(lexer, sign));
@


1.17
log
@*** empty log message ***
@
text
@d42 3
a44 1
	 * @@return name of the instruction
d59 5
d304 2
a305 4
	/**
	 * Returns a <code>String</code> representation of the object.
	 * 
	 * @@return a string representation of the object.
@


1.16
log
@Fixed parser, should now pass all the addressing modes correctly
@
text
@d290 1
d293 2
a294 1
		return new StringOperand(s.toString());
@


1.15
log
@*** empty log message ***
@
text
@d105 2
a106 1
					case Operand.TYPE_LABEL:{
d141 3
a143 2
	
	private LabelOperand parseLabelOperand(Lexer lexer) throws LexerException, ParseException{
d145 2
a146 2
		
		if (token.getType() == Lexer.IDENTIFIER){
d148 5
a152 2
		}else{
			throw new ParseException(token, Lexer.IDENTIFIER, lexer.getLineNumber());
d162 1
d175 1
a175 1
				token = lexer.nextToken();
d179 1
d183 1
d202 1
d206 8
a213 3
			String sign = lexer.currentToken().getValue();

			token = lexer.nextToken();
d217 1
d221 1
d242 1
d244 2
a245 1
		lexer.pushTokenBack();
@


1.14
log
@*** empty log message ***
@
text
@d105 4
d138 10
@


1.13
log
@*** empty log message ***
@
text
@d62 1
a62 1
		
d64 1
a64 1
		
d100 5
d152 1
a152 1
				
d154 1
a154 1
				
d184 1
a184 1
			
d186 1
a186 1
			
d227 3
a229 1
				return Integer.parseInt(sign + lexer.currentToken().getValue(), 16);
d231 3
a233 1
				return Integer.parseInt(sign + lexer.currentToken().getValue(), 8);
d250 11
@


1.12
log
@*** empty log message ***
@
text
@d62 4
d67 1
a67 1
		return new ImmediateOperand(parseImmediateValue(lexer));
d147 3
a149 1

d152 1
a152 1
				int immediate = parseImmediateValue(lexer);
d178 5
a182 1
			int immediate = parseImmediateValue(lexer);
d213 1
a213 1
	private int parseImmediateValue(Lexer lexer)
d222 1
a222 1
				return Integer.parseInt(lexer.currentToken().getValue(), 16);
d224 1
a224 1
				return Integer.parseInt(lexer.currentToken().getValue(), 8);
@


1.11
log
@Progress on parsing addressing modes.
@
text
@a56 5
	/**
	 * Returns the type of the instruction.
	 * 
	 * @@return the type of the instruction
	 */
d59 5
a63 2
	private Operand parseImmediateOperand(Lexer lexer) {
		return null;
d137 1
a137 1
		} else if (token.getType() == Lexer.IDENTIFIER) {// detects a lebel
d143 1
d145 23
d171 17
a188 1
		return null;
d205 10
a214 3
			
			if(lexer.currentToken().getType() == Lexer.IDENTIFIER){
				return Integer.parseInt(lexer.currentToken().getValue());
d216 3
a218 1
		return 0;
@


1.10
log
@Added parsing addressing modes, unfinished
@
text
@d139 1
a139 1
		} else if (token.getType() == Lexer.IDENTIFIER) {
d144 1
a144 1
				|| (token.getType() == Lexer.MINUS)) {
@


1.9
log
@Replaced MIPSLexer class with the new class Lexer.
@
text
@d15 6
d25 1
a25 1
	
d30 1
a30 1
	
d34 1
a34 1
	public static final int TYPE_R = 3; 
d56 1
a56 1
	
d64 1
a64 1
	private Operand parseImmediateOeprand(Lexer lexer) {
d90 6
a95 1
						operands.add(parseImmediateOeprand(lexer));
d129 57
a185 1
	
@


1.8
log
@*** empty log message ***
@
text
@d58 1
a58 1
	private Operand parseImmediateOeprand(MIPSLexer lexer) {
d70 1
a70 1
	protected void parseOperands(MIPSLexer lexer, int[] expected)
d91 1
a91 1
								+ lexer.getCurrentToken().getValue(),
d97 1
a97 1
				if (token.getType() != MIPSLexer.COMMA) {
d106 1
a106 1
	private RegisterOperand parseRegisterOperand(MIPSLexer lexer)
d109 1
a109 1
		if (token.getType() == MIPSLexer.DOLLAR) {
@


1.7
log
@*** empty log message ***
@
text
@d125 1
a125 1
		StringBuffer buffer = new StringBuffer(name);
@


1.6
log
@*** empty log message ***
@
text
@d33 1
a33 1
	private List oprands;
d47 2
a48 2
	public List getOprands() {
		return oprands;
d58 1
a58 1
	private Operand parseImmediateOprand(MIPSLexer lexer) {
d70 1
a70 1
	protected void parseOprands(MIPSLexer lexer, int[] expected)
d79 1
a79 1
						oprands.add(parseRegisterOprand(lexer));
d84 1
a84 1
						oprands.add(parseImmediateOprand(lexer));
d106 1
a106 1
	private RegisterOperand parseRegisterOprand(MIPSLexer lexer)
d129 1
a129 1
		Iterator it = oprands.iterator();
@


1.5
log
@corrected typo
@
text
@d109 1
a109 2
		if (token.getType() == MIPSLexer.DOLLAR
			|| token.getType() == MIPSLexer.COLON) {
d114 1
a114 1
				"Expected '$' or ':', not '" + token.getValue() + "'",
@


1.4
log
@Updated parser files
@
text
@d58 1
a58 1
	private Oprand parseImmediateOprand(MIPSLexer lexer) {
d77 1
a77 1
				case Oprand.TYPE_REGISTER :
d82 1
a82 1
				case Oprand.TYPE_IMMEDIATE :
d106 1
a106 1
	private RegisterOprand parseRegisterOprand(MIPSLexer lexer)
d112 1
a112 1
			return new RegisterOprand(token.getValue());
d128 1
a128 1
		Oprand op;
d133 1
a133 1
			op = (Oprand) it.next();
@


1.3
log
@*** empty log message ***
@
text
@d10 1
a10 1
 * models a single instruction, all instructions should subclass this abstract class.
d30 1
a30 1
	private String name;
@


1.2
log
@*** empty log message ***
@
text
@d70 1
a70 1
	public void parseOprands(MIPSLexer lexer, int[] expected)
@


1.1
log
@Updated package structure.
@
text
@a14 1

d16 6
a21 1
	 * Instruction needing immediate values as it's oprands.
d23 2
a24 1
	public static final int IMMEDIATE_OPRAND = 1;
d26 1
a26 1
	 * Instruction needing register as it's oprands.
d28 1
a28 1
	public static final int REGISTER_OPRAND = 0;
d43 2
d50 7
d77 1
a77 1
				case REGISTER_OPRAND :
d82 1
a82 1
				case IMMEDIATE_OPRAND :
d119 1
a119 1

@

