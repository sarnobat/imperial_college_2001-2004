head	1.9;
access;
symbols
	yams-final-19-12-03:1.9
	yams-release2-17-12-03:1.9
	yams-release-17-12-03:1.9
	cleanup:1.8.0.2
	Root_cleanup:1.8
	stable-13-12-2003:1.8;
locks; strict;
comment	@# @;


1.9
date	2003.12.17.13.49.14;	author qq01;	state Exp;
branches;
next	1.8;

1.8
date	2003.12.02.13.34.03;	author qq01;	state Exp;
branches;
next	1.7;

1.7
date	2003.11.28.16.53.08;	author qq01;	state Exp;
branches;
next	1.6;

1.6
date	2003.11.15.18.00.39;	author qq01;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.14.15.48.46;	author qq01;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.11.21.16.22;	author qq01;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.11.01.17.45;	author qq01;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.10.19.21.10;	author qq01;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.10.10.57.49;	author qq01;	state Exp;
branches;
next	;


desc
@@


1.9
log
@added javadoc
@
text
@/*
 * Created on 06-Nov-2003
 */
package yams.parser;

import java.util.Vector;

/**
 * Models a instruction of type R.
 * 
 * @@author qq01
 */
public class RInstruction extends Instruction {
	
	/**
	 * Constructs a new instruction of type R.
	 * 
	 * @@param name name of the instruction.
	 * @@param lexer lexer
	 * @@param operands expected operands.
	 * @@throws LexerException if the lexer finds an error.
	 * @@throws ParseException if the parser finds an error.
	 */
	public RInstruction(String name, Lexer lexer, int[] operands)
		throws LexerException, ParseException {
		this.name = name;
		this.operands = new Vector();

		parseOperands(lexer, operands);
	}

	/* (non-Javadoc)
	 * @@see yams.parser.Instruction#getType()
	 */
	public int getType() {
		return TYPE_R;
	}
}
@


1.8
log
@Updated javadoc
@
text
@d9 2
@


1.7
log
@*** empty log message ***
@
text
@d13 9
a27 14
	}

	public RInstruction(String name, Lexer lexer, int numberOfOperands)
		throws LexerException, ParseException {

		this.name = name;

		operands = new Vector();

		int[] expected = new int[numberOfOperands];
		for (int i = 0; i < numberOfOperands; i++) {
			expected[i] = Operand.TYPE_REGISTER;
		}
		parseOperands(lexer, expected);
@


1.6
log
@Replaced MIPSLexer class with the new class Lexer.
@
text
@d12 9
d25 1
a25 1
		
@


1.5
log
@*** empty log message ***
@
text
@d12 1
a12 1
	public RInstruction(String name, MIPSLexer lexer, int numberOfOperands)
@


1.4
log
@corrected typo
@
text
@d6 2
d16 2
d23 1
a23 1
		parseOprands(lexer, expected);
@


1.3
log
@Updated parser files
@
text
@d10 1
a10 1
	public RInstruction(String name, MIPSLexer lexer, int numberOfOprands)
d15 3
a17 3
		int[] expected = new int[numberOfOprands];
		for (int i = 0; i < numberOfOprands; i++) {
			expected[i] = Oprand.TYPE_REGISTER;
@


1.2
log
@*** empty log message ***
@
text
@d12 3
@


1.1
log
@Updated package structure.
@
text
@d14 1
a14 1
			expected[i] = REGISTER_OPRAND;
d17 7
@

