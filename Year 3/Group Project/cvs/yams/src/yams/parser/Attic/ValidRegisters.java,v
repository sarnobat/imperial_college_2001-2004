head	1.5;
access;
symbols
	cleanup:1.4.0.2
	Root_cleanup:1.4
	stable-13-12-2003:1.4;
locks; strict;
comment	@# @;


1.5
date	2003.12.16.11.37.11;	author qq01;	state dead;
branches;
next	1.4;

1.4
date	2003.11.23.23.19.46;	author qq01;	state Exp;
branches;
next	1.3;

1.3
date	2003.11.14.16.51.34;	author ss401;	state Exp;
branches;
next	1.2;

1.2
date	2003.11.12.01.33.34;	author qq01;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.11.15.23.00;	author ss401;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Deleted unused class ValidRegisters
@
text
@/*
 * Created on 11-Nov-2003
 *
 */
package yams.parser;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * This is a class with a static method to obtain the names of all registers which
 * exist in the system. It reads the data contained in the registers.xml file, currently located in the 
 * project root folder (if anyone knows how to make it work in a more local directory,
 * let me know!).
 * 
 * @@author ss401
 */
public class ValidRegisters {

	static String[] regs = getValidRegisters();
	static final String XMLFILELOCATION = "registers.xml";

	/**
	 * Returns an array of register names, reading from file registers.xml
	 * @@return
	 */
	static String[] getValidRegisters() {
		Node n = getRootNode();
		List tempRegs = new ArrayList();

		NodeList l = n.getChildNodes();

		for (int i = 1; i < l.getLength(); i+=2) {
			Node curr = l.item(i);
			String regName = curr.getFirstChild().getNodeValue();
			tempRegs.add(regName);
			
		}

		String[] regsArr = new String[tempRegs.size()];
		regsArr = (String[]) tempRegs.toArray(regsArr);
		return regsArr;
	}

	static Node getRootNode() {
		DocumentBuilderFactory factory;
		DocumentBuilder builder;
		Document document;
		Node root = null;
		try {
			factory = DocumentBuilderFactory.newInstance();
			builder = factory.newDocumentBuilder();
			document = builder.parse(new File(XMLFILELOCATION));
			root = document.getFirstChild();

		}
		catch (Exception e) {
			System.out.println("Couldn't read xml document." + e);
			System.exit(-1);
		}
		return root;
	}
}
@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@Added XSLT parser files
@
text
@a18 1
 * @@author ss401
d23 2
@


1.2
log
@updated parser files
@
text
@d8 2
d16 1
d20 4
a23 1
 *
d26 1
a26 1
	
d28 6
a33 2
	static final String XMLFILELOCATION = "/vol/project/2003/362/g0336204B/cvs/yams/src/yams/parser/registers.xml";
	
d35 22
d58 5
a62 5
			DocumentBuilderFactory factory =	DocumentBuilderFactory.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse( new File(XMLFILELOCATION) );
			Node MIPS_root_Node = document.getFirstChild();
			System.out.println(MIPS_root_Node.toString());	
d66 1
a66 1
			System.exit(-1);			
d68 1
a68 2
		
		return null;
@


1.1
log
@Added 3 files for importing valid register data
@
text
@a36 2
		
		
@

