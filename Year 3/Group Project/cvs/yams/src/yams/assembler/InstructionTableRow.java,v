head	1.7;
access;
symbols
	yams-final-19-12-03:1.7
	yams-release2-17-12-03:1.5
	yams-release-17-12-03:1.5;
locks; strict;
comment	@# @;


1.7
date	2003.12.19.14.20.25;	author qq01;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.19.13.25.30;	author jkm01;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.11.18.26.16;	author jkm01;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.10.17.15.07;	author jkm01;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.10.14.38.21;	author jkm01;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.10.01.00.42;	author jkm01;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.09.18.55.24;	author jkm01;	state Exp;
branches;
next	;


desc
@@


1.7
log
@updated javadoc
@
text
@/*
 * Created on 08-Dec-2003
 *
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */
package yams.assembler;
import java.util.*;

/**
 * Contained within a TreeMap within InstructionTable, contains more information on an instruction and further references to different representations of it.
 *
 * @@author jkm01
 */
public class InstructionTableRow
{
	private String instructionName;
	private String instructionType;
	private String coreCode;
	private TreeMap representations;
	
	public InstructionTableRow()
	{
		representations = new TreeMap();
	}
	public Iterator getRepresentationsIterator()
	{
		return representations.keySet().iterator();
	}
	public void setInstructionName(String in)
	{
		instructionName=in;
	}
	public void setInstructionType(String type)
	{
		instructionType=type;
	}
	public String getType()
	{
		return instructionType;
	}
	public void setCoreMachineCode(String machineCode)
	{
		coreCode = machineCode;
	}
	public String getCoreMachineCode()
	{
		return coreCode;
	}
	public String printRow()
	{
		String outputString="name: "+instructionName+" REPRESENTATIONS: \n";
		Set instructionSet = representations.keySet();
		Iterator instructionSetIterator = instructionSet.iterator();
		while (instructionSetIterator.hasNext())
		{
			String currentKey = (String)instructionSetIterator.next();
			Representation currentRepresentation = (Representation)representations.get(currentKey);
			outputString += currentRepresentation.printRepresentation();
		}
		return outputString;
	}
	public void addRepresentation(String operandEncoding, Representation r)
	{
		representations.put(operandEncoding, r);		
	}
	public boolean isRepresentation(String operandEncoding)
	{
		return representations.containsKey(operandEncoding);
	}
	public Representation getRepresentation(String operandEncoding) throws AssemblerException
	{
		if (isRepresentation(operandEncoding))  return (Representation)representations.get(operandEncoding);
		else									throw new AssemblerException("[Error A19] representation "+operandEncoding+" not found for instruction "+instructionName,-1,null);
	}
	public String getName()
	{
		return instructionName;
	}
}@


1.6
log
@*** empty log message ***
@
text
@a10 2
 * @@author jkm01
 * 
d13 1
@


1.5
log
@*** empty log message ***
@
text
@d12 2
a14 2
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
a15 1

@


1.4
log
@*** empty log message ***
@
text
@d76 1
a76 1
		else									throw new AssemblerException("Error representation "+operandEncoding+" not found for instruction "+instructionName);
d82 1
a82 30
}


/*
public class InstructionTableRow
{
	private TreeMap instructionOperands;
	private String machineCode;
	public InstructionTableRow(String code)
	{
		machineCode=code; instructionOperands = new TreeMap();
	}
	public void addOperand(OperandDetails oD)
	{
		instructionOperands.put(oD.getNumber(),oD);
	}
	public String getMachineCode() {return machineCode;}
	public OperandDetails getOperand(int number)
	{
		for (int i = 0; i<instructionOperands.size(); i++)
			{
				if ((OperandDetails)instructionOperands.get(i).getNumber()==number || (number>3 && instructionOperands[i].getNumber()==3))
					{
						return instructionOperands[i];
					}
			}
		return null;
	}
}
*/@


1.3
log
@*** empty log message ***
@
text
@d20 2
d35 16
@


1.2
log
@*** empty log message ***
@
text
@d26 4
@


1.1
log
@added extra files
@
text
@d8 1
a8 1
import java.util.TreeMap;
d26 17
d51 1
a51 1
	public Representation getRepresentation(String operandEncoding)
d53 2
a54 1
		return (Representation)representations.get(operandEncoding);
@

