head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2003.12.11.16.43.02;	author jkm01;	state dead;
branches;
next	1.5;

1.5
date	2003.12.10.17.15.07;	author jkm01;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.10.14.56.03;	author jkm01;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.10.14.38.20;	author jkm01;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.10.01.00.42;	author jkm01;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.09.18.55.24;	author jkm01;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@/*
 * Created on 03-Dec-2003
 *
 * To change the template for this generated file go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */

package yams.assembler;
import java.util.TreeMap;
import java.util.Set;
import java.util.Iterator;
/**
 * @@author jkm01
 *
 * To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Generation - Code and Comments
 */

public class InstructionTable2
{
	TreeMap instructionMap;	
	TreeMap machineCodeMap;

	public InstructionTable2()
	{
		instructionMap = new TreeMap();
		machineCodeMap = new TreeMap();
	}
	public String printTable()
	{
		String outputString="";
		Set instructionSet = instructionMap.keySet();
		Iterator instructionSetIterator = instructionSet.iterator();
		while (instructionSetIterator.hasNext())
		{
			String currentKey = (String)instructionSetIterator.next();
			InstructionTableRow currentRow= (InstructionTableRow)instructionMap.get(currentKey);
			outputString+= currentRow.printRow();
		}
		return outputString;
	}
	public void resetInstructionTable2()
	{
		instructionMap.clear();
		machineCodeMap.clear();
	}
	public void addInstruction(String instructionName, InstructionTableRow r) throws AssemblerException
	{
		instructionMap.put(instructionName, r);
		
		// for debugging add mapping from code to monatomic instructions
		String machineCode;
		if (r.getType().equals("Regular"))
			{
				Representation thisRepresentation;
				Iterator i = r.getRepresentationsIterator();
				while (i.hasNext())
					{
						String key = (String)i.next();
						thisRepresentation = r.getRepresentation(key);	
						machineCode=thisRepresentation.getMachineCode();
						if (machineCode.length()==32)
							{
								if (machineCode.substring(0,6).equals("000000"))
									{
										machineCodeMap.put(machineCode.substring(0,6)+machineCode.substring(26,32),instructionName);														
									}
								else
									{
										machineCodeMap.put(machineCode.substring(0,6), instructionName);														
									}
							}
					}
			}
		else if (r.getType().equals("Extended"))
			{
				machineCode = r.getCoreMachineCode();
				if (machineCode.substring(0,6).equals("000000"))
					{
						machineCodeMap.put(machineCode.substring(0,6)+machineCode.substring(26,32),instructionName);														
					}
				else
					{
						machineCodeMap.put(machineCode.substring(0,6), instructionName);														
					}
			}
	}
	public boolean isInstruction(String instructionName)
	{
		return instructionMap.containsKey(instructionName);
	}
	public InstructionTableRow getInstruction(String instructionName) throws AssemblerException
	{
		if (isInstruction(instructionName))	return (InstructionTableRow)instructionMap.get(instructionName);
		else								throw new AssemblerException("Error - instruction "+instructionName+" doesnt exist in instructionfile");
	}
	public String getMonatomicInstruction(String machineCode) throws AssemblerException
	{
		String name="";
		if (machineCode.length()==32)
			{
				if (machineCode.substring(0,6).equals("000000"))
					{
						name = (String)machineCodeMap.get(machineCode.substring(0,6)+machineCode.substring(26,32));														
					}
				else
					{
						name = (String)machineCodeMap.get(machineCode.substring(0,6));														
					}				
			}
		if (name=="") throw new AssemblerException("Error - instruction "+machineCode+" doesnt exist as monatomic instruction in instructionfile");
		else return name;
	}	
	
}@


1.5
log
@*** empty log message ***
@
text
@@


1.4
log
@*** empty log message ***
@
text
@a51 1
		Representation thisRepresentation;
d53 1
a53 2
		Iterator i = r.getRepresentationsIterator();
		while (i.hasNext())
d55 3
a57 4
				String key = (String)i.next();
				thisRepresentation = r.getRepresentation(key);	
				machineCode=thisRepresentation.getMachineCode();
				if (machineCode.length()==32)
d59 4
a62 1
						if (machineCode.substring(0,6).equals("000000"))
d64 8
a71 5
								machineCodeMap.put(machineCode.substring(0,6)+machineCode.substring(26,32),instructionName);														
							}
						else
							{
								machineCodeMap.put(machineCode.substring(0,6), instructionName);														
d75 12
a86 1
		
@


1.3
log
@*** empty log message ***
@
text
@d101 1
a101 134
}


/*
public class InstructionTable2 {

	TreeMap instructionMap;
	TreeMap machineCodeMap;

	public InstructionTable2()
	{
		instructionMap = new TreeMap();
	}

	public void addRow(String name, String operandCode, InstructionTableRow row)
	{
		instructionMap.put(name+operandCode,row);
//		machineCodeMap.put(getUniqueIdentifier(row.getMachineCode()),row);
	}
	
	private String getUniqueIdentifier(String machineCode)
	{
		if (machineCode.substring(0,6).equals("000000"))
			{
				return machineCode.substring(0,6)+machineCode.substring(26,32);
			}
		else
			{
				return machineCode.substring(0,6);
			}
	}
	
	public InstructionTableRow getRow(String name,String operandCode)
	{
		if (instructionMap.containsKey(name+operandCode))
			{
				return (InstructionTableRow)instructionMap.get(name+operandCode);				
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('4','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('4','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('5','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('5','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('6','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('6','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('7','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('7','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('8','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('8','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('9','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('9','3')));
			}
		else return null;

	}
	
}


/*
public class InstructionTable2 {

	TreeMap instructionMap;
	TreeMap machineCodeMap;

	public InstructionTable2()
	{
		instructionMap = new TreeMap();
	}

	public void addRow(String name, String operandCode, InstructionTableRow row)
	{
		instructionMap.put(name+operandCode,row);
//		machineCodeMap.put(getUniqueIdentifier(row.getMachineCode()),row);
	}
	
	private String getUniqueIdentifier(String machineCode)
	{
		if (machineCode.substring(0,6).equals("000000"))
			{
				return machineCode.substring(0,6)+machineCode.substring(26,32);
			}
		else
			{
				return machineCode.substring(0,6);
			}
	}
	
	public InstructionTableRow getRow(String name,String operandCode)
	{
		if (instructionMap.containsKey(name+operandCode))
			{
				return (InstructionTableRow)instructionMap.get(name+operandCode);				
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('4','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('4','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('5','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('5','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('6','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('6','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('7','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('7','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('8','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('8','3')));
			}
		else if (instructionMap.containsKey(name+(operandCode.replace('9','3')))) 
			{
				return (InstructionTableRow)instructionMap.get(name+(operandCode.replace('9','3')));
			}
		else return null;

	}
	
}
*/@


1.2
log
@*** empty log message ***
@
text
@d22 1
d27 1
d45 1
d47 1
a47 1
	public void addInstruction(String instructionName, InstructionTableRow r)
d50 23
d83 17
@


1.1
log
@added extra files
@
text
@d10 2
a11 1

d21 1
a21 1
	TreeMap instructionMap;	private static String OPERANDS_MASK_TAG = "Mask";
d27 13
d52 1
a52 1
	public InstructionTableRow getInstruction(String instructionName)
d54 2
a55 1
		return (InstructionTableRow)instructionMap.get(instructionName);
@

