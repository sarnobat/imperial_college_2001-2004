/*
 * Created on 03-Nov-2003
 *
 */
package yams.processor;
import java.io.PrintStream;
import yams.exceptions.YAMSUnsupportedInstructionException;

/**
 * An autogenerated instruction handler.
 * The instructions have been added to this file by the instruction handler
 * generator, taking the XML file as input.
 *  
 * @author sw00
 */
public class InstructionHandlerAutoGen implements InstructionHandlerInterface {
	
	private RegisterManagerInterface regs;
	private MemoryManagerInterface mem;
	private PrintStream out;
	
	/**
	 * Create a new instruction handler.
	 * @param registerManager
	 * @param memoryManager
	 */
	public InstructionHandlerAutoGen(RegisterManagerInterface registerManager,
								MemoryManagerInterface memoryManager,
								PrintStream out) {
		regs = registerManager;
		mem = memoryManager;
		this.out = out;
	}

	public boolean execute(int instruction) {
		MIPSWord inst = new MIPSWord(instruction);
		// get 'op' field to determine instruction
		MIPSBitstring op_bitstr = MIPSBitstring.extract(inst, 26, 31);
		int op = op_bitstr.toInt();
		
		if(op == 0) {
			// we're executing an R type instruction
			
			// extract R type instruction operands
			MIPSBitstring rs_bitstr = MIPSBitstring.extract(inst, 21, 25);
			MIPSBitstring rt_bitstr = MIPSBitstring.extract(inst, 16, 20);
			MIPSBitstring rd_bitstr = MIPSBitstring.extract(inst, 11, 15);
			MIPSBitstring shamt_bitstr = MIPSBitstring.extract(inst, 6, 10);
			MIPSBitstring func_bitstr = MIPSBitstring.extract(inst, 0, 5);
			int rs = rs_bitstr.toInt();
			int rt = rt_bitstr.toInt();
			int rd = rd_bitstr.toInt();
			int shamt = shamt_bitstr.toInt();
			int func = func_bitstr.toInt();
					
			switch(func) {

// R TYPE INSTRUCTIONS GO HERE
										
				default: {
					// unsupported instruction
					throw new YAMSUnsupportedInstructionException();	
				}
			}
			return true;
		}

		// extract I type instruction operands
		MIPSBitstring rs_bitstr = MIPSBitstring.extract(inst, 21, 25);
		MIPSBitstring rt_bitstr = MIPSBitstring.extract(inst, 16, 20);
		MIPSBitstring i_bitstr = MIPSBitstring.extract(inst, 0, 15);
		int rs = rs_bitstr.toInt();
		int rt = rt_bitstr.toInt();
		int i = i_bitstr.signExtend();
		
		// extract J type instruction operand
		MIPSBitstring addr_bitstr = MIPSBitstring.extract(inst, 0, 25);
		int addr = addr_bitstr.signExtend();

		switch(op) { 
							
// I TYPE INSTRUCTIONS GO HERE
			
// J TYPE INSTRUCTIONS GO HERE
			
			default: {
				// unsupported instruction
				throw new YAMSUnsupportedInstructionException();
			}		
		}		
		return true;
	}

	public void setCycleManager(CycleManagerInterface cycleManager) {
	}

}

