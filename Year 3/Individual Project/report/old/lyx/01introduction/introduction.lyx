#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass article
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Section

What the project is about 
\layout Standard

Transferring data between databases is a common problem in industry.
 These databases may be separated by a network of any scale, be it a local
 network or the Internet.
 The most popular type of database is the Relational Database.
 
\layout Standard

XML (eXtensible Markup Language) has emerged as a popular candidate for
 exchanging data in such a scenario due to its attractive combination of
 simplicity, precision and, as the name suggests, extensibility.
 
\layout Standard

To make use of XML for exchanging relational data, it is necessary to convert
 between the 2 data representations.
 However, they are inherently different.
 The following extract from Apaches XML project summarizes the problem well:
 
\layout Quotation

"XML documents are organized as tree structures.
 Relational databases organize data in a tabular, or grid-like fashion,
 and use relational linking in order to expose hierarchical constraints
 on the data.
 Unfortunately, while it's generally very easy to map relational data into
 XML, trying to map XML, which can be very complex and freeform, into relational
 data can be incredibly difficult and lossy." 
\layout Standard

This project develops techniques for converting data between XML and Relational
 Databases.
 We also write an application implementing these techniques.
 
\layout Comment

[IMMEDIATELY SHOW WHAT YOUVE DONE TO SOLVE THE PROBLEM, WITH A SCREENSHOT
 OF YOUR APPLICATION] 
\layout Section

Aims 
\layout Standard

We wish to be able to import data from an XML document into a relational
 database.
 However, the schema of the XML document and the schema of the relational
 database must correspond (obviously the data cannot be imported into an
 arbitrary database).
 
\layout Standard

To ensure that the schemas correspond, it is necessary to generate one from
 the other.
 In this project, the source schema will be that to which the XML document
 conforms.
 Therefore, the first problem is to generate a relational schema based on
 the XML schema .
 We could equally well have chosen to study the reverse process.
 However, as the above comment by Apache points out, this is less challenging.
 
\layout Standard

It shall not be attempted to study a bidirectional mapping between the schemas
 because, in practice, one would never dispose of the original schema informatio
n.
 This is because it occupies a negligible amount of storage space compared
 to the data itself.
 The relational schema generated must be 'well-designed'.
 There is no concrete definition of this.
 However, by well-designed it is meant that a user must be able to comprehend
 and browse the relational dataset directly, without being exposed to data
 that the user would consider 'noise' (i.e.
 irrelevant for conventional use).
 This is a crucial aspect of our aims as shall be regularly reaffirmed.
 
\layout Standard

With the relational schema established the second task is to import the
 XML data into it.
 This data should integrate seamlessly with data added to the relational
 database by conventional methods (such as web applications or terminal
 users).
 
\layout Standard

The final target is to be able to regenerate the XML documents that had
 been imported.
 However, unlike with the XML schema, it will not be permitted to simply
 store a copy of the original document for later retrieval.
 There are two reasons for this: 
\layout Itemize

It is very likely that the relational data will be updated at some point
 (much more so that the relational schema) and so the regenerated document
 must reflect these changes.
 In other words, they must be consistent.
 
\layout Itemize

Storing separate copies unnecessarily doubles the amount of space occupied
 by the relational database (unlike storing the XML schema which only adds
 a constant amount to the required storage space).
 
\layout Standard

In summary, the aims are to: 
\layout Enumerate

Generate a well-designed relational schema from an XML schema.
\layout Enumerate

Import data from an XML document (conforming to the original XML schema)
 into the generated relational schema.
 
\layout Enumerate

Regenerate imported XML file, but which reflect any changes to the data
 during their residence in the database.
 
\the_end
