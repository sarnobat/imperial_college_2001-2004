#include <stdlib.h>
#include <cgRender.h>
#include <GL/glut.h>

GLfloat vertices[][3] = {{-1,-1,1},{-1,1,1},{1,1,1},{1,-1,1},{-1,-1,-1},{-1,1,-1},{1,1,-1},{1,-1,-1}};
GLfloat colors[][3] = {{1,0,0},{0,1,1},{1,1,0},{0,1,0},{0,0,1},{1,0,1}};
GLubyte myImage[512][512][3];

void polygon(int a,int b,int c,int d){
	glBegin(GL_POLYGON);
		glTexCoord2f(0,0);
		glVertex2f(0,0);
		glTexCoord2f(0,1);
		glVertex2f(0,1);
		glTexCoord2f(1,1);
		glVertex2f(1,1);
  		glTexCoord2f(1,0);
		glVertex2f(1,0);
	glEnd();
	/*glBegin(GL_POLYGON);
		//glColor3fv(colors[a]);
		glTexCoord2f(0,0);
		glVertex3fv(vertices[a]);
		//glColor3fv(colors[b]);
		glTexCoord2f(0,1);
		glVertex3fv(vertices[b]);
		//glColor3fv(colors[c]);
		glTexCoord2f(1,1);
		glVertex3fv(vertices[c]);
		//glColor3fv(colors[d]);
		glTexCoord2f(1,0);
		glVertex3fv(vertices[d]);
	glEnd();*/
}
void colorcube(void){
	polygon(0,3,2,1);
	/*polygon(2,3,7,6);
	polygon(3,0,4,7);
	polygon(1,2,6,5);
	polygon(4,5,6,7);
	polygon(5,4,0,1);*/
}

void display(){
	glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	colorcube();
	glutSwapBuffers();
}
void readTextureValues(void){
	int row,column,color = 0;
	FILE *textureFile;
	unsigned char number;

	//the "rb" means reading a binary file
	textureFile = fopen("face.ppm", "rb");
	int i = 0;
	//Skip to correct place in file
	while(i<15){
		fread(&number,1,1,textureFile);
		i++;
	}

	// Go through the file and store the RGB triplets
	for(row = 0;row<512;row++) {
		for(column=0;column<512;column++) {
			for(color=0;color<3;color++) {
				fread(&number,1,1,textureFile);
				myImage[row][column][color] = number;
				//printf("%d  ",number);
			}
			//printf("\n");
		}
		//printf("\n\n***");
	}
}

int main(int argc,char **argv){
	readTextureValues();
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB|GLUT_DEPTH);
	glutInitWindowSize(500,500);
	glutCreateWindow("colorcube");

	glutDisplayFunc(display);
	//glEnable(GL_DEPTH_TEST);
	glEnable(GL_TEXTURE_2D);

	glTexImage2D(GL_TEXTURE_2D,0,3,512,512,0,GL_RGB,GL_UNSIGNED_BYTE,myImage);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,GL_CLAMP);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,GL_NEAREST);
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,GL_NEAREST);
	glutMainLoop();
}

